/* tslint:disable */
/* eslint-disable */
/**
 * nest-admin后台管理系统API文档
 * NestJs CRUD for RESTful API使用 nestjs + mysql + typeorm + redis + jwt + swagger 企业中后台管理系统项目RBAC权限管理(细粒度到按钮)、实现单点登录等。
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 *
 * @export
 * @interface AccountInfo
 */
export interface AccountInfo {
  /**
   *
   * @type {string}
   * @memberof AccountInfo
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof AccountInfo
   */
  nickName: string;
  /**
   *
   * @type {string}
   * @memberof AccountInfo
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof AccountInfo
   */
  phone: string;
  /**
   *
   * @type {string}
   * @memberof AccountInfo
   */
  remark: string;
  /**
   *
   * @type {string}
   * @memberof AccountInfo
   */
  headImg: string;
  /**
   *
   * @type {string}
   * @memberof AccountInfo
   */
  loginIp: string;
}
/**
 *
 * @export
 * @interface CheckIdTaskDto
 */
export interface CheckIdTaskDto {
  /**
   * 任务ID
   * @type {number}
   * @memberof CheckIdTaskDto
   */
  id: number;
}
/**
 *
 * @export
 * @interface CoreLoad
 */
export interface CoreLoad {
  /**
   * 当前CPU资源消耗
   * @type {number}
   * @memberof CoreLoad
   */
  rawLoad: number;
  /**
   * 当前空闲CPU资源
   * @type {number}
   * @memberof CoreLoad
   */
  rawLoadIdle: number;
}
/**
 *
 * @export
 * @interface Cpu
 */
export interface Cpu {
  /**
   * 制造商 e.g. Intel(R)
   * @type {string}
   * @memberof Cpu
   */
  manufacturer: string;
  /**
   * 品牌 e.g. Core(TM)2 Duo
   * @type {string}
   * @memberof Cpu
   */
  brand: string;
  /**
   * 物理核心数
   * @type {number}
   * @memberof Cpu
   */
  physicalCores: number;
  /**
   * 型号
   * @type {string}
   * @memberof Cpu
   */
  model: string;
  /**
   * 速度 in GHz e.g. 3.4
   * @type {number}
   * @memberof Cpu
   */
  speed: number;
  /**
   * CPU资源消耗 原始滴答
   * @type {number}
   * @memberof Cpu
   */
  rawCurrentLoad: number;
  /**
   * 空闲CPU资源 原始滴答
   * @type {number}
   * @memberof Cpu
   */
  rawCurrentLoadIdle: number;
  /**
   * cpu资源消耗
   * @type {Array<CoreLoad>}
   * @memberof Cpu
   */
  coresLoad: Array<CoreLoad>;
}
/**
 *
 * @export
 * @interface CreateDeptDto
 */
export interface CreateDeptDto {
  /**
   * 部门名称
   * @type {string}
   * @memberof CreateDeptDto
   */
  name: string;
  /**
   * 父级部门id
   * @type {number}
   * @memberof CreateDeptDto
   */
  parentId: number;
  /**
   * 排序编号
   * @type {number}
   * @memberof CreateDeptDto
   */
  orderNum?: number;
}
/**
 *
 * @export
 * @interface CreateGoodsDto
 */
export interface CreateGoodsDto {
  /**
   * 扩展字段
   * @type {object}
   * @memberof CreateGoodsDto
   */
  ext: object;
}
/**
 *
 * @export
 * @interface CreateMenuDto
 */
export interface CreateMenuDto {
  /**
   * 菜单类型
   * @type {number}
   * @memberof CreateMenuDto
   */
  type: number;
  /**
   * 父级菜单
   * @type {number}
   * @memberof CreateMenuDto
   */
  parentId: number;
  /**
   * 菜单或权限名称
   * @type {string}
   * @memberof CreateMenuDto
   */
  name: string;
  /**
   * 排序
   * @type {number}
   * @memberof CreateMenuDto
   */
  orderNum: number;
  /**
   * 前端路由地址
   * @type {string}
   * @memberof CreateMenuDto
   */
  router: string;
  /**
   * 菜单是否显示
   * @type {boolean}
   * @memberof CreateMenuDto
   */
  isShow?: boolean;
  /**
   * 开启页面缓存
   * @type {boolean}
   * @memberof CreateMenuDto
   */
  keepalive?: boolean;
  /**
   * 是否外链
   * @type {boolean}
   * @memberof CreateMenuDto
   */
  isExt?: boolean;
  /**
   * 外链打开方式
   * @type {number}
   * @memberof CreateMenuDto
   */
  openMode?: number;
  /**
   * 菜单图标
   * @type {string}
   * @memberof CreateMenuDto
   */
  icon?: string;
  /**
   * 对应权限
   * @type {string}
   * @memberof CreateMenuDto
   */
  perms: string;
  /**
   * 菜单路由路径或外链
   * @type {string}
   * @memberof CreateMenuDto
   */
  viewPath: string;
}
/**
 *
 * @export
 * @interface CreateOrderDto
 */
export interface CreateOrderDto {
  /**
   * 商品id
   * @type {number}
   * @memberof CreateOrderDto
   */
  goods_id: number;
  /**
   * 商品名称
   * @type {string}
   * @memberof CreateOrderDto
   */
  goods_name: string;
  /**
   * 商品类型
   * @type {string}
   * @memberof CreateOrderDto
   */
  goods_type: string;
  /**
   * 商品价格
   * @type {number}
   * @memberof CreateOrderDto
   */
  goods_price: number;
  /**
   * 商品数量
   * @type {number}
   * @memberof CreateOrderDto
   */
  goods_count: number;
  /**
   * 收件人id
   * @type {number}
   * @memberof CreateOrderDto
   */
  receiver_id: number;
  /**
   * 订单状态
   * @type {number}
   * @memberof CreateOrderDto
   */
  status: number;
  /**
   * 优惠券信息
   * @type {string}
   * @memberof CreateOrderDto
   */
  coupon: string;
  /**
   * 扩展字段
   * @type {object}
   * @memberof CreateOrderDto
   */
  ext: object;
}
/**
 *
 * @export
 * @interface CreateParamConfigDto
 */
export interface CreateParamConfigDto {
  /**
   * 参数名称
   * @type {string}
   * @memberof CreateParamConfigDto
   */
  name: string;
  /**
   * 参数键名
   * @type {string}
   * @memberof CreateParamConfigDto
   */
  key: string;
  /**
   * 参数值
   * @type {string}
   * @memberof CreateParamConfigDto
   */
  value: string;
  /**
   * 备注
   * @type {string}
   * @memberof CreateParamConfigDto
   */
  remark?: string;
}
/**
 *
 * @export
 * @interface CreateReceiverDto
 */
export interface CreateReceiverDto {
  /**
   * 用户姓名
   * @type {string}
   * @memberof CreateReceiverDto
   */
  name: string;
  /**
   * 省份信息
   * @type {string}
   * @memberof CreateReceiverDto
   */
  province: string;
  /**
   * 城市信息
   * @type {string}
   * @memberof CreateReceiverDto
   */
  city: string;
  /**
   * 区县信息
   * @type {string}
   * @memberof CreateReceiverDto
   */
  area: string;
  /**
   * 区县code
   * @type {string}
   * @memberof CreateReceiverDto
   */
  area_code: string;
  /**
   * 邮编
   * @type {string}
   * @memberof CreateReceiverDto
   */
  postal_code: string;
  /**
   * 详细地址信息
   * @type {string}
   * @memberof CreateReceiverDto
   */
  detail: string;
  /**
   * 邮箱
   * @type {string}
   * @memberof CreateReceiverDto
   */
  email?: string;
  /**
   * 手机号
   * @type {string}
   * @memberof CreateReceiverDto
   */
  phone?: string;
  /**
   * 备注
   * @type {string}
   * @memberof CreateReceiverDto
   */
  remark?: string;
  /**
   * 呢称
   * @type {string}
   * @memberof CreateReceiverDto
   */
  nick_name?: string;
}
/**
 *
 * @export
 * @interface CreateRoleDto
 */
export interface CreateRoleDto {
  /**
   * 角色名称
   * @type {string}
   * @memberof CreateRoleDto
   */
  name: string;
  /**
   * 角色唯一标识
   * @type {string}
   * @memberof CreateRoleDto
   */
  label: string;
  /**
   * 角色备注
   * @type {string}
   * @memberof CreateRoleDto
   */
  remark?: string;
  /**
   * 关联菜单、权限编号
   * @type {Array<string>}
   * @memberof CreateRoleDto
   */
  menus?: Array<string>;
  /**
   * 关联部门编号
   * @type {Array<string>}
   * @memberof CreateRoleDto
   */
  depts?: Array<string>;
}
/**
 *
 * @export
 * @interface CreateTaskDto
 */
export interface CreateTaskDto {
  /**
   * 任务名称
   * @type {string}
   * @memberof CreateTaskDto
   */
  name: string;
  /**
   * 调用的服务
   * @type {string}
   * @memberof CreateTaskDto
   */
  service: string;
  /**
   * 任务类别：cron | interval
   * @type {number}
   * @memberof CreateTaskDto
   */
  type: number;
  /**
   * 任务状态
   * @type {number}
   * @memberof CreateTaskDto
   */
  status: number;
  /**
   * 开始时间
   * @type {string}
   * @memberof CreateTaskDto
   */
  startTime?: string;
  /**
   * 结束时间
   * @type {string}
   * @memberof CreateTaskDto
   */
  endTime?: string;
  /**
   * 限制执行次数，负数则无限制
   * @type {number}
   * @memberof CreateTaskDto
   */
  limit?: number;
  /**
   * cron表达式
   * @type {string}
   * @memberof CreateTaskDto
   */
  cron: string;
  /**
   * 执行间隔，毫秒单位
   * @type {number}
   * @memberof CreateTaskDto
   */
  every: number;
  /**
   * 执行参数
   * @type {string}
   * @memberof CreateTaskDto
   */
  data?: string;
  /**
   * 任务备注
   * @type {string}
   * @memberof CreateTaskDto
   */
  remark?: string;
}
/**
 *
 * @export
 * @interface CreateUserDto
 */
export interface CreateUserDto {
  /**
   * 所属部门编号
   * @type {number}
   * @memberof CreateUserDto
   */
  departmentId: number;
  /**
   * 用户姓名
   * @type {string}
   * @memberof CreateUserDto
   */
  name: string;
  /**
   * 登录账号
   * @type {string}
   * @memberof CreateUserDto
   */
  username: string;
  /**
   * 归属角色
   * @type {Array<number>}
   * @memberof CreateUserDto
   */
  roles: Array<number>;
  /**
   * 呢称
   * @type {string}
   * @memberof CreateUserDto
   */
  nickName?: string;
  /**
   * 邮箱
   * @type {string}
   * @memberof CreateUserDto
   */
  email?: string;
  /**
   * 手机号
   * @type {string}
   * @memberof CreateUserDto
   */
  phone?: string;
  /**
   * 备注
   * @type {string}
   * @memberof CreateUserDto
   */
  remark?: string;
  /**
   * 状态
   * @type {number}
   * @memberof CreateUserDto
   */
  status: number;
}
/**
 *
 * @export
 * @interface DeleteDeptDto
 */
export interface DeleteDeptDto {
  /**
   * 删除的系统部门ID
   * @type {number}
   * @memberof DeleteDeptDto
   */
  departmentId: number;
}
/**
 *
 * @export
 * @interface DeleteDto
 */
export interface DeleteDto {
  /**
   * 需要操作的文件或文件夹
   * @type {Array<FileOpItem>}
   * @memberof DeleteDto
   */
  files: Array<FileOpItem>;
  /**
   * 所在目录
   * @type {string}
   * @memberof DeleteDto
   */
  path: string;
}
/**
 *
 * @export
 * @interface DeleteGoodsDto
 */
export interface DeleteGoodsDto {
  /**
   * 需要删除的用户ID列表
   * @type {Array<number>}
   * @memberof DeleteGoodsDto
   */
  ids: Array<number>;
}
/**
 *
 * @export
 * @interface DeleteMenuDto
 */
export interface DeleteMenuDto {
  /**
   * 删除的菜单ID
   * @type {number}
   * @memberof DeleteMenuDto
   */
  menuId: number;
}
/**
 *
 * @export
 * @interface DeleteParamConfigDto
 */
export interface DeleteParamConfigDto {
  /**
   * 需要删除的配置id列表
   * @type {Array<number>}
   * @memberof DeleteParamConfigDto
   */
  ids: Array<number>;
}
/**
 *
 * @export
 * @interface DeleteReceiverDto
 */
export interface DeleteReceiverDto {
  /**
   * 需要删除的用户ID列表
   * @type {Array<number>}
   * @memberof DeleteReceiverDto
   */
  ids: Array<number>;
}
/**
 *
 * @export
 * @interface DeleteRoleDto
 */
export interface DeleteRoleDto {
  /**
   * 需要删除的角色ID列表
   * @type {Array<number>}
   * @memberof DeleteRoleDto
   */
  roleIds: Array<number>;
}
/**
 *
 * @export
 * @interface DeleteUserDto
 */
export interface DeleteUserDto {
  /**
   * 需要删除的用户ID列表
   * @type {Array<number>}
   * @memberof DeleteUserDto
   */
  userIds: Array<number>;
}
/**
 *
 * @export
 * @interface DeleteorderDto
 */
export interface DeleteorderDto {
  /**
   * 需要删除的用户ID列表
   * @type {Array<number>}
   * @memberof DeleteorderDto
   */
  ids: Array<number>;
}
/**
 *
 * @export
 * @interface DeptDetailInfo
 */
export interface DeptDetailInfo {
  /**
   *
   * @type {SysDepartment}
   * @memberof DeptDetailInfo
   */
  department: SysDepartment;
  /**
   *
   * @type {SysDepartment}
   * @memberof DeptDetailInfo
   */
  parentDepartment: SysDepartment;
}
/**
 *
 * @export
 * @interface Disk
 */
export interface Disk {
  /**
   * 磁盘空间大小 (bytes)
   * @type {number}
   * @memberof Disk
   */
  size: number;
  /**
   * 已使用磁盘空间 (bytes)
   * @type {number}
   * @memberof Disk
   */
  used: number;
  /**
   * 可用磁盘空间 (bytes)
   * @type {number}
   * @memberof Disk
   */
  available: number;
}
/**
 *
 * @export
 * @interface FileInfoDto
 */
export interface FileInfoDto {
  /**
   * 文件名
   * @type {string}
   * @memberof FileInfoDto
   */
  name: string;
  /**
   * 文件所在路径
   * @type {string}
   * @memberof FileInfoDto
   */
  path: string;
}
/**
 *
 * @export
 * @interface FileOpDto
 */
export interface FileOpDto {
  /**
   * 需要操作的文件或文件夹
   * @type {Array<FileOpItem>}
   * @memberof FileOpDto
   */
  files: Array<FileOpItem>;
  /**
   * 操作前的目录
   * @type {string}
   * @memberof FileOpDto
   */
  originPath: string;
  /**
   * 操作后的目录
   * @type {string}
   * @memberof FileOpDto
   */
  toPath: string;
}
/**
 *
 * @export
 * @interface FileOpItem
 */
export interface FileOpItem {
  /**
   * 文件类型
   * @type {string}
   * @memberof FileOpItem
   */
  type: FileOpItemTypeEnum;
  /**
   * 文件名称
   * @type {string}
   * @memberof FileOpItem
   */
  name: string;
}

export const FileOpItemTypeEnum = {
  File: 'file',
  Dir: 'dir',
} as const;

export type FileOpItemTypeEnum = (typeof FileOpItemTypeEnum)[keyof typeof FileOpItemTypeEnum];

/**
 *
 * @export
 * @interface FlowInfo
 */
export interface FlowInfo {
  /**
   * 当月的X号
   * @type {Array<number>}
   * @memberof FlowInfo
   */
  times: Array<number>;
  /**
   * 对应天数的耗费流量
   * @type {Array<number>}
   * @memberof FlowInfo
   */
  datas: Array<number>;
}
/**
 *
 * @export
 * @interface ImageCaptcha
 */
export interface ImageCaptcha {
  /**
   * base64格式的svg图片
   * @type {string}
   * @memberof ImageCaptcha
   */
  img: string;
  /**
   * 验证码对应的唯一ID
   * @type {string}
   * @memberof ImageCaptcha
   */
  id: string;
}
/**
 *
 * @export
 * @interface KickDto
 */
export interface KickDto {
  /**
   * 需要下线的角色ID
   * @type {number}
   * @memberof KickDto
   */
  id: number;
}
/**
 *
 * @export
 * @interface LoginInfoDto
 */
export interface LoginInfoDto {
  /**
   * 管理员用户名
   * @type {string}
   * @memberof LoginInfoDto
   */
  username: string;
  /**
   * 管理员密码
   * @type {string}
   * @memberof LoginInfoDto
   */
  password: string;
  /**
   * 验证码标识
   * @type {string}
   * @memberof LoginInfoDto
   */
  captchaId: string;
  /**
   * 用户输入的验证码
   * @type {string}
   * @memberof LoginInfoDto
   */
  verifyCode: string;
}
/**
 *
 * @export
 * @interface LoginLogInfo
 */
export interface LoginLogInfo {
  /**
   * 日志编号
   * @type {number}
   * @memberof LoginLogInfo
   */
  id: number;
  /**
   * 登录ip
   * @type {string}
   * @memberof LoginLogInfo
   */
  ip: string;
  /**
   * 系统
   * @type {string}
   * @memberof LoginLogInfo
   */
  os: string;
  /**
   * 浏览器
   * @type {string}
   * @memberof LoginLogInfo
   */
  browser: string;
  /**
   * 时间
   * @type {string}
   * @memberof LoginLogInfo
   */
  time: string;
  /**
   * 登录用户名
   * @type {string}
   * @memberof LoginLogInfo
   */
  username: string;
}
/**
 *
 * @export
 * @interface LoginToken
 */
export interface LoginToken {
  /**
   * JWT身份Token
   * @type {string}
   * @memberof LoginToken
   */
  token: string;
}
/**
 *
 * @export
 * @interface MKDirDto
 */
export interface MKDirDto {
  /**
   * 文件夹名称
   * @type {string}
   * @memberof MKDirDto
   */
  dirName: string;
  /**
   * 所属路径
   * @type {string}
   * @memberof MKDirDto
   */
  path: string;
}
/**
 *
 * @export
 * @interface MarkFileDto
 */
export interface MarkFileDto {
  /**
   * 文件名
   * @type {string}
   * @memberof MarkFileDto
   */
  name: string;
  /**
   * 文件所在路径
   * @type {string}
   * @memberof MarkFileDto
   */
  path: string;
  /**
   * 备注信息
   * @type {string}
   * @memberof MarkFileDto
   */
  mark: string;
}
/**
 *
 * @export
 * @interface Memory
 */
export interface Memory {
  /**
   * total memory in bytes
   * @type {number}
   * @memberof Memory
   */
  total: number;
  /**
   * 可用内存
   * @type {number}
   * @memberof Memory
   */
  available: number;
}
/**
 *
 * @export
 * @interface MenuItemAndParentInfoResult
 */
export interface MenuItemAndParentInfoResult {
  /**
   *
   * @type {SysMenu}
   * @memberof MenuItemAndParentInfoResult
   */
  menu: SysMenu;
  /**
   *
   * @type {SysMenu}
   * @memberof MenuItemAndParentInfoResult
   */
  parentMenu: SysMenu;
}
/**
 *
 * @export
 * @interface MoveDept
 */
export interface MoveDept {
  /**
   * 当前部门ID
   * @type {number}
   * @memberof MoveDept
   */
  id: number;
  /**
   * 移动到指定父级部门的ID
   * @type {number}
   * @memberof MoveDept
   */
  parentId: number;
}
/**
 *
 * @export
 * @interface MoveDeptDto
 */
export interface MoveDeptDto {
  /**
   * 部门列表
   * @type {Array<MoveDept>}
   * @memberof MoveDeptDto
   */
  depts: Array<MoveDept>;
}
/**
 *
 * @export
 * @interface OnlineUserInfo
 */
export interface OnlineUserInfo {
  /**
   * 最近的一条登录日志ID
   * @type {number}
   * @memberof OnlineUserInfo
   */
  id: number;
  /**
   * 登录IP
   * @type {string}
   * @memberof OnlineUserInfo
   */
  ip: string;
  /**
   * 用户名
   * @type {string}
   * @memberof OnlineUserInfo
   */
  username: string;
  /**
   * 是否当前
   * @type {boolean}
   * @memberof OnlineUserInfo
   */
  isCurrent: boolean;
  /**
   * 登陆时间
   * @type {string}
   * @memberof OnlineUserInfo
   */
  time: string;
  /**
   * 系统
   * @type {string}
   * @memberof OnlineUserInfo
   */
  os: string;
  /**
   * 浏览器
   * @type {string}
   * @memberof OnlineUserInfo
   */
  browser: string;
  /**
   * 是否禁用
   * @type {boolean}
   * @memberof OnlineUserInfo
   */
  disable: boolean;
}
/**
 *
 * @export
 * @interface OverviewSpaceInfo
 */
export interface OverviewSpaceInfo {
  /**
   * 当前使用容量
   * @type {number}
   * @memberof OverviewSpaceInfo
   */
  spaceSize: number;
  /**
   * 当前文件数量
   * @type {number}
   * @memberof OverviewSpaceInfo
   */
  fileSize: number;
  /**
   * 当天使用流量
   * @type {number}
   * @memberof OverviewSpaceInfo
   */
  flowSize: number;
  /**
   * 当天请求次数
   * @type {number}
   * @memberof OverviewSpaceInfo
   */
  hitSize: number;
  /**
   *
   * @type {FlowInfo}
   * @memberof OverviewSpaceInfo
   */
  flowTrend: FlowInfo;
  /**
   *
   * @type {SpaceInfo}
   * @memberof OverviewSpaceInfo
   */
  sizeTrend: SpaceInfo;
}
/**
 *
 * @export
 * @interface PageSearchGoodsDto
 */
export interface PageSearchGoodsDto {
  /**
   * 当前页包含数量
   * @type {number}
   * @memberof PageSearchGoodsDto
   */
  limit?: number;
  /**
   * 当前页包含数量
   * @type {number}
   * @memberof PageSearchGoodsDto
   */
  page?: number;
  /**
   * 扩展字段
   * @type {object}
   * @memberof PageSearchGoodsDto
   */
  ext: object;
}
/**
 *
 * @export
 * @interface PageSearchGoodsInfo
 */
export interface PageSearchGoodsInfo {
  /**
   *
   * @type {string}
   * @memberof PageSearchGoodsInfo
   */
  createdAt: string;
  /**
   *
   * @type {string}
   * @memberof PageSearchGoodsInfo
   */
  updatedAt: string;
  /**
   *
   * @type {number}
   * @memberof PageSearchGoodsInfo
   */
  id: number;
  /**
   * 扩展字段
   * @type {object}
   * @memberof PageSearchGoodsInfo
   */
  ext: object;
}
/**
 *
 * @export
 * @interface PageSearchOrderInfo
 */
export interface PageSearchOrderInfo {
  /**
   *
   * @type {string}
   * @memberof PageSearchOrderInfo
   */
  createdAt: string;
  /**
   *
   * @type {string}
   * @memberof PageSearchOrderInfo
   */
  updatedAt: string;
  /**
   *
   * @type {number}
   * @memberof PageSearchOrderInfo
   */
  id: number;
  /**
   * 扩展字段
   * @type {object}
   * @memberof PageSearchOrderInfo
   */
  ext: object;
  /**
   * 商品id
   * @type {number}
   * @memberof PageSearchOrderInfo
   */
  goods_id: number;
  /**
   * 商品名称
   * @type {string}
   * @memberof PageSearchOrderInfo
   */
  goods_name: string;
  /**
   * 商品类型
   * @type {string}
   * @memberof PageSearchOrderInfo
   */
  goods_type: string;
  /**
   * 商品价格
   * @type {number}
   * @memberof PageSearchOrderInfo
   */
  goods_price: number;
  /**
   * 商品数量
   * @type {number}
   * @memberof PageSearchOrderInfo
   */
  goods_count: number;
  /**
   * 收件人id
   * @type {number}
   * @memberof PageSearchOrderInfo
   */
  receiver_id: number;
  /**
   * 订单状态
   * @type {number}
   * @memberof PageSearchOrderInfo
   */
  status: number;
  /**
   * 优惠券信息
   * @type {string}
   * @memberof PageSearchOrderInfo
   */
  coupon: string;
}
/**
 *
 * @export
 * @interface PageSearchReceiverDto
 */
export interface PageSearchReceiverDto {
  /**
   * 当前页包含数量
   * @type {number}
   * @memberof PageSearchReceiverDto
   */
  limit?: number;
  /**
   * 当前页包含数量
   * @type {number}
   * @memberof PageSearchReceiverDto
   */
  page?: number;
  /**
   * 呢称
   * @type {string}
   * @memberof PageSearchReceiverDto
   */
  nick_name?: string;
  /**
   * 用户姓名
   * @type {string}
   * @memberof PageSearchReceiverDto
   */
  name?: string;
  /**
   * 区县code
   * @type {string}
   * @memberof PageSearchReceiverDto
   */
  area_code?: string;
  /**
   * 邮箱
   * @type {string}
   * @memberof PageSearchReceiverDto
   */
  email?: string;
  /**
   * 手机号
   * @type {string}
   * @memberof PageSearchReceiverDto
   */
  phone?: string;
}
/**
 *
 * @export
 * @interface PageSearchUserDto
 */
export interface PageSearchUserDto {
  /**
   * 当前页包含数量
   * @type {number}
   * @memberof PageSearchUserDto
   */
  limit?: number;
  /**
   * 当前页包含数量
   * @type {number}
   * @memberof PageSearchUserDto
   */
  page?: number;
  /**
   * 部门列表
   * @type {Array<number>}
   * @memberof PageSearchUserDto
   */
  departmentIds?: Array<number>;
  /**
   * 用户姓名
   * @type {object}
   * @memberof PageSearchUserDto
   */
  name?: object;
  /**
   * 用户名
   * @type {object}
   * @memberof PageSearchUserDto
   */
  username?: object;
  /**
   * 用户手机号
   * @type {object}
   * @memberof PageSearchUserDto
   */
  phone?: object;
  /**
   * 用户备注
   * @type {object}
   * @memberof PageSearchUserDto
   */
  remark?: object;
}
/**
 *
 * @export
 * @interface PageSearchUserInfo
 */
export interface PageSearchUserInfo {
  /**
   *
   * @type {string}
   * @memberof PageSearchUserInfo
   */
  createdAt: string;
  /**
   *
   * @type {number}
   * @memberof PageSearchUserInfo
   */
  departmentId: number;
  /**
   *
   * @type {string}
   * @memberof PageSearchUserInfo
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof PageSearchUserInfo
   */
  headImg: string;
  /**
   *
   * @type {number}
   * @memberof PageSearchUserInfo
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof PageSearchUserInfo
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof PageSearchUserInfo
   */
  nickName: string;
  /**
   *
   * @type {string}
   * @memberof PageSearchUserInfo
   */
  phone: string;
  /**
   *
   * @type {string}
   * @memberof PageSearchUserInfo
   */
  remark: string;
  /**
   *
   * @type {number}
   * @memberof PageSearchUserInfo
   */
  status: number;
  /**
   *
   * @type {string}
   * @memberof PageSearchUserInfo
   */
  updatedAt: string;
  /**
   *
   * @type {string}
   * @memberof PageSearchUserInfo
   */
  username: string;
  /**
   *
   * @type {string}
   * @memberof PageSearchUserInfo
   */
  departmentName: string;
  /**
   *
   * @type {Array<string>}
   * @memberof PageSearchUserInfo
   */
  roleNames: Array<string>;
}
/**
 *
 * @export
 * @interface PageSearchorderDto
 */
export interface PageSearchorderDto {
  /**
   * 当前页包含数量
   * @type {number}
   * @memberof PageSearchorderDto
   */
  limit?: number;
  /**
   * 当前页包含数量
   * @type {number}
   * @memberof PageSearchorderDto
   */
  page?: number;
  /**
   * 商品名称
   * @type {string}
   * @memberof PageSearchorderDto
   */
  goods_name: string;
  /**
   * 商品类型
   * @type {string}
   * @memberof PageSearchorderDto
   */
  goods_type: string;
  /**
   * 收件人id
   * @type {number}
   * @memberof PageSearchorderDto
   */
  receiver_id: number;
  /**
   * 订单状态
   * @type {number}
   * @memberof PageSearchorderDto
   */
  status: number;
  /**
   * 扩展字段
   * @type {object}
   * @memberof PageSearchorderDto
   */
  ext: object;
}
/**
 *
 * @export
 * @interface PaginatedResponseDto
 */
export interface PaginatedResponseDto {
  /**
   *
   * @type {Pagination}
   * @memberof PaginatedResponseDto
   */
  pagination: Pagination;
}
/**
 *
 * @export
 * @interface Pagination
 */
export interface Pagination {
  /**
   *
   * @type {number}
   * @memberof Pagination
   */
  total: number;
  /**
   *
   * @type {number}
   * @memberof Pagination
   */
  page: number;
  /**
   *
   * @type {number}
   * @memberof Pagination
   */
  size: number;
}
/**
 *
 * @export
 * @interface PasswordUserDto
 */
export interface PasswordUserDto {
  /**
   * 管理员ID
   * @type {number}
   * @memberof PasswordUserDto
   */
  userId: number;
  /**
   * 更改后的密码
   * @type {string}
   * @memberof PasswordUserDto
   */
  password: string;
}
/**
 *
 * @export
 * @interface PermMenuInfo
 */
export interface PermMenuInfo {
  /**
   * 菜单列表
   * @type {Array<SysMenu>}
   * @memberof PermMenuInfo
   */
  menus: Array<SysMenu>;
  /**
   * 权限列表
   * @type {Array<string>}
   * @memberof PermMenuInfo
   */
  perms: Array<string>;
}
/**
 *
 * @export
 * @interface RenameDto
 */
export interface RenameDto {
  /**
   * 文件类型
   * @type {string}
   * @memberof RenameDto
   */
  type: string;
  /**
   * 更改的名称
   * @type {string}
   * @memberof RenameDto
   */
  toName: string;
  /**
   * 原来的名称
   * @type {string}
   * @memberof RenameDto
   */
  name: string;
  /**
   * 路径
   * @type {string}
   * @memberof RenameDto
   */
  path: string;
}
/**
 *
 * @export
 * @interface RoleInfo
 */
export interface RoleInfo {
  /**
   *
   * @type {SysRole}
   * @memberof RoleInfo
   */
  roleInfo: SysRole;
  /**
   *
   * @type {Array<SysRoleMenu>}
   * @memberof RoleInfo
   */
  menus: Array<SysRoleMenu>;
  /**
   *
   * @type {Array<SysRoleDepartment>}
   * @memberof RoleInfo
   */
  depts: Array<SysRoleDepartment>;
}
/**
 *
 * @export
 * @interface Runtime
 */
export interface Runtime {
  /**
   * 系统
   * @type {string}
   * @memberof Runtime
   */
  os: string;
  /**
   * 服务器架构
   * @type {string}
   * @memberof Runtime
   */
  arch: string;
  /**
   * Node版本
   * @type {string}
   * @memberof Runtime
   */
  nodeVersion: string;
  /**
   * Npm版本
   * @type {string}
   * @memberof Runtime
   */
  npmVersion: string;
}
/**
 *
 * @export
 * @interface SFileInfo
 */
export interface SFileInfo {
  /**
   * 文件id
   * @type {string}
   * @memberof SFileInfo
   */
  id: string;
  /**
   * 文件类型
   * @type {string}
   * @memberof SFileInfo
   */
  type: SFileInfoTypeEnum;
  /**
   * 文件名称
   * @type {string}
   * @memberof SFileInfo
   */
  name: string;
  /**
   * 存入时间
   * @type {string}
   * @memberof SFileInfo
   */
  putTime: string;
  /**
   * 文件大小, byte单位
   * @type {string}
   * @memberof SFileInfo
   */
  fsize: string;
  /**
   * 文件的mime-type
   * @type {string}
   * @memberof SFileInfo
   */
  mimeType: string;
  /**
   * 所属目录
   * @type {string}
   * @memberof SFileInfo
   */
  belongTo: string;
}

export const SFileInfoTypeEnum = {
  File: 'file',
  Dir: 'dir',
} as const;

export type SFileInfoTypeEnum = (typeof SFileInfoTypeEnum)[keyof typeof SFileInfoTypeEnum];

/**
 *
 * @export
 * @interface SFileInfoDetail
 */
export interface SFileInfoDetail {
  /**
   * 文件大小，int64类型，单位为字节（Byte）
   * @type {number}
   * @memberof SFileInfoDetail
   */
  fsize: number;
  /**
   * 文件HASH值
   * @type {string}
   * @memberof SFileInfoDetail
   */
  hash: string;
  /**
   * 文件MIME类型，string类型
   * @type {string}
   * @memberof SFileInfoDetail
   */
  mimeType: string;
  /**
   * 文件存储类型，2 表示归档存储，1 表示低频存储，0表示普通存储。
   * @type {number}
   * @memberof SFileInfoDetail
   */
  type: number;
  /**
   * 文件上传时间
   * @type {string}
   * @memberof SFileInfoDetail
   */
  putTime: string;
  /**
   * 文件md5值
   * @type {string}
   * @memberof SFileInfoDetail
   */
  md5: string;
  /**
   * 上传人
   * @type {string}
   * @memberof SFileInfoDetail
   */
  uploader: string;
  /**
   * 文件备注
   * @type {string}
   * @memberof SFileInfoDetail
   */
  mark: string;
}
/**
 *
 * @export
 * @interface SFileList
 */
export interface SFileList {
  /**
   * 文件列表
   * @type {Array<SFileInfo>}
   * @memberof SFileList
   */
  list: Array<SFileInfo>;
  /**
   * 分页标志，空则代表加载完毕
   * @type {string}
   * @memberof SFileList
   */
  marker: string;
}
/**
 *
 * @export
 * @interface ServeStatInfo
 */
export interface ServeStatInfo {
  /**
   *
   * @type {Runtime}
   * @memberof ServeStatInfo
   */
  runtime: Runtime;
  /**
   *
   * @type {Cpu}
   * @memberof ServeStatInfo
   */
  cpu: Cpu;
  /**
   *
   * @type {Disk}
   * @memberof ServeStatInfo
   */
  disk: Disk;
  /**
   *
   * @type {Memory}
   * @memberof ServeStatInfo
   */
  memory: Memory;
}
/**
 *
 * @export
 * @interface SpaceInfo
 */
export interface SpaceInfo {
  /**
   * 当月的X号
   * @type {Array<number>}
   * @memberof SpaceInfo
   */
  times: Array<number>;
  /**
   * 对应天数的容量, byte单位
   * @type {Array<number>}
   * @memberof SpaceInfo
   */
  datas: Array<number>;
}
/**
 *
 * @export
 * @interface SysConfig
 */
export interface SysConfig {
  /**
   *
   * @type {string}
   * @memberof SysConfig
   */
  createdAt: string;
  /**
   *
   * @type {string}
   * @memberof SysConfig
   */
  updatedAt: string;
  /**
   *
   * @type {number}
   * @memberof SysConfig
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof SysConfig
   */
  key: string;
  /**
   *
   * @type {string}
   * @memberof SysConfig
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof SysConfig
   */
  value: string;
  /**
   *
   * @type {string}
   * @memberof SysConfig
   */
  remark: string;
}
/**
 *
 * @export
 * @interface SysDepartment
 */
export interface SysDepartment {
  /**
   *
   * @type {string}
   * @memberof SysDepartment
   */
  createdAt: string;
  /**
   *
   * @type {string}
   * @memberof SysDepartment
   */
  updatedAt: string;
  /**
   *
   * @type {number}
   * @memberof SysDepartment
   */
  id: number;
  /**
   *
   * @type {number}
   * @memberof SysDepartment
   */
  parentId: number;
  /**
   *
   * @type {string}
   * @memberof SysDepartment
   */
  name: string;
  /**
   *
   * @type {number}
   * @memberof SysDepartment
   */
  orderNum: number;
}
/**
 *
 * @export
 * @interface SysLogControllerLoginLogPage200Response
 */
export interface SysLogControllerLoginLogPage200Response {
  /**
   *
   * @type {Pagination}
   * @memberof SysLogControllerLoginLogPage200Response
   */
  pagination: Pagination;
  /**
   *
   * @type {Array<LoginLogInfo>}
   * @memberof SysLogControllerLoginLogPage200Response
   */
  list?: Array<LoginLogInfo>;
}
/**
 *
 * @export
 * @interface SysMenu
 */
export interface SysMenu {
  /**
   *
   * @type {string}
   * @memberof SysMenu
   */
  createdAt: string;
  /**
   *
   * @type {string}
   * @memberof SysMenu
   */
  updatedAt: string;
  /**
   *
   * @type {number}
   * @memberof SysMenu
   */
  id: number;
  /**
   *
   * @type {number}
   * @memberof SysMenu
   */
  parentId: number;
  /**
   *
   * @type {string}
   * @memberof SysMenu
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof SysMenu
   */
  router: string;
  /**
   *
   * @type {string}
   * @memberof SysMenu
   */
  perms: string;
  /**
   *
   * @type {number}
   * @memberof SysMenu
   */
  type: number;
  /**
   *
   * @type {string}
   * @memberof SysMenu
   */
  icon: string;
  /**
   *
   * @type {number}
   * @memberof SysMenu
   */
  orderNum: number;
  /**
   *
   * @type {string}
   * @memberof SysMenu
   */
  viewPath: string;
  /**
   *
   * @type {boolean}
   * @memberof SysMenu
   */
  keepalive: boolean;
  /**
   *
   * @type {boolean}
   * @memberof SysMenu
   */
  isShow: boolean;
  /**
   *
   * @type {boolean}
   * @memberof SysMenu
   */
  isExt: boolean;
  /**
   *
   * @type {number}
   * @memberof SysMenu
   */
  openMode: number;
}
/**
 *
 * @export
 * @interface SysRole
 */
export interface SysRole {
  /**
   *
   * @type {string}
   * @memberof SysRole
   */
  createdAt: string;
  /**
   *
   * @type {string}
   * @memberof SysRole
   */
  updatedAt: string;
  /**
   *
   * @type {number}
   * @memberof SysRole
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof SysRole
   */
  userId: string;
  /**
   *
   * @type {string}
   * @memberof SysRole
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof SysRole
   */
  label: string;
  /**
   *
   * @type {string}
   * @memberof SysRole
   */
  remark: string;
}
/**
 *
 * @export
 * @interface SysRoleDepartment
 */
export interface SysRoleDepartment {
  /**
   *
   * @type {string}
   * @memberof SysRoleDepartment
   */
  createdAt: string;
  /**
   *
   * @type {string}
   * @memberof SysRoleDepartment
   */
  updatedAt: string;
  /**
   *
   * @type {number}
   * @memberof SysRoleDepartment
   */
  id: number;
  /**
   *
   * @type {number}
   * @memberof SysRoleDepartment
   */
  roleId: number;
  /**
   *
   * @type {number}
   * @memberof SysRoleDepartment
   */
  departmentId: number;
}
/**
 *
 * @export
 * @interface SysRoleMenu
 */
export interface SysRoleMenu {
  /**
   *
   * @type {string}
   * @memberof SysRoleMenu
   */
  createdAt: string;
  /**
   *
   * @type {string}
   * @memberof SysRoleMenu
   */
  updatedAt: string;
  /**
   *
   * @type {number}
   * @memberof SysRoleMenu
   */
  id: number;
  /**
   *
   * @type {number}
   * @memberof SysRoleMenu
   */
  roleId: number;
  /**
   *
   * @type {number}
   * @memberof SysRoleMenu
   */
  menuId: number;
}
/**
 *
 * @export
 * @interface SysTask
 */
export interface SysTask {
  /**
   *
   * @type {string}
   * @memberof SysTask
   */
  createdAt: string;
  /**
   *
   * @type {string}
   * @memberof SysTask
   */
  updatedAt: string;
  /**
   *
   * @type {number}
   * @memberof SysTask
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof SysTask
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof SysTask
   */
  service: string;
  /**
   *
   * @type {number}
   * @memberof SysTask
   */
  type: number;
  /**
   *
   * @type {number}
   * @memberof SysTask
   */
  status: number;
  /**
   *
   * @type {string}
   * @memberof SysTask
   */
  startTime: string;
  /**
   *
   * @type {string}
   * @memberof SysTask
   */
  endTime: string;
  /**
   *
   * @type {number}
   * @memberof SysTask
   */
  limit: number;
  /**
   *
   * @type {string}
   * @memberof SysTask
   */
  cron: string;
  /**
   *
   * @type {number}
   * @memberof SysTask
   */
  every: number;
  /**
   *
   * @type {string}
   * @memberof SysTask
   */
  data: string;
  /**
   *
   * @type {string}
   * @memberof SysTask
   */
  jobOpts: string;
  /**
   *
   * @type {string}
   * @memberof SysTask
   */
  remark: string;
}
/**
 *
 * @export
 * @interface TaskLogInfo
 */
export interface TaskLogInfo {
  /**
   * 日志编号
   * @type {number}
   * @memberof TaskLogInfo
   */
  id: number;
  /**
   * 任务编号
   * @type {number}
   * @memberof TaskLogInfo
   */
  taskId: number;
  /**
   * 任务名称
   * @type {string}
   * @memberof TaskLogInfo
   */
  name: string;
  /**
   * 创建时间
   * @type {string}
   * @memberof TaskLogInfo
   */
  createdAt: string;
  /**
   * 耗时
   * @type {number}
   * @memberof TaskLogInfo
   */
  consumeTime: number;
  /**
   * 执行信息
   * @type {string}
   * @memberof TaskLogInfo
   */
  detail: string;
  /**
   * 任务执行状态
   * @type {number}
   * @memberof TaskLogInfo
   */
  status: number;
}
/**
 *
 * @export
 * @interface TransferDeptDto
 */
export interface TransferDeptDto {
  /**
   * 需要转移的管理员列表编号
   * @type {Array<number>}
   * @memberof TransferDeptDto
   */
  userIds: Array<number>;
  /**
   * 需要转移过去的系统部门ID
   * @type {number}
   * @memberof TransferDeptDto
   */
  departmentId: number;
}
/**
 *
 * @export
 * @interface UpdateDeptDto
 */
export interface UpdateDeptDto {
  /**
   * 部门名称
   * @type {string}
   * @memberof UpdateDeptDto
   */
  name: string;
  /**
   * 父级部门id
   * @type {number}
   * @memberof UpdateDeptDto
   */
  parentId: number;
  /**
   * 排序编号
   * @type {number}
   * @memberof UpdateDeptDto
   */
  orderNum?: number;
  /**
   * 需要更新的部门id
   * @type {number}
   * @memberof UpdateDeptDto
   */
  id: number;
}
/**
 *
 * @export
 * @interface UpdateGoodsDto
 */
export interface UpdateGoodsDto {
  /**
   * 扩展字段
   * @type {object}
   * @memberof UpdateGoodsDto
   */
  ext: object;
  /**
   * 商品ID
   * @type {number}
   * @memberof UpdateGoodsDto
   */
  id: number;
}
/**
 *
 * @export
 * @interface UpdateMenuDto
 */
export interface UpdateMenuDto {
  /**
   * 菜单类型
   * @type {number}
   * @memberof UpdateMenuDto
   */
  type: number;
  /**
   * 父级菜单
   * @type {number}
   * @memberof UpdateMenuDto
   */
  parentId: number;
  /**
   * 菜单或权限名称
   * @type {string}
   * @memberof UpdateMenuDto
   */
  name: string;
  /**
   * 排序
   * @type {number}
   * @memberof UpdateMenuDto
   */
  orderNum: number;
  /**
   * 前端路由地址
   * @type {string}
   * @memberof UpdateMenuDto
   */
  router: string;
  /**
   * 菜单是否显示
   * @type {boolean}
   * @memberof UpdateMenuDto
   */
  isShow?: boolean;
  /**
   * 开启页面缓存
   * @type {boolean}
   * @memberof UpdateMenuDto
   */
  keepalive?: boolean;
  /**
   * 是否外链
   * @type {boolean}
   * @memberof UpdateMenuDto
   */
  isExt?: boolean;
  /**
   * 外链打开方式
   * @type {number}
   * @memberof UpdateMenuDto
   */
  openMode?: number;
  /**
   * 菜单图标
   * @type {string}
   * @memberof UpdateMenuDto
   */
  icon?: string;
  /**
   * 对应权限
   * @type {string}
   * @memberof UpdateMenuDto
   */
  perms: string;
  /**
   * 菜单路由路径或外链
   * @type {string}
   * @memberof UpdateMenuDto
   */
  viewPath: string;
  /**
   * 更新的菜单ID
   * @type {number}
   * @memberof UpdateMenuDto
   */
  menuId: number;
}
/**
 *
 * @export
 * @interface UpdateOrderDto
 */
export interface UpdateOrderDto {
  /**
   * 商品id
   * @type {number}
   * @memberof UpdateOrderDto
   */
  goods_id: number;
  /**
   * 商品名称
   * @type {string}
   * @memberof UpdateOrderDto
   */
  goods_name: string;
  /**
   * 商品类型
   * @type {string}
   * @memberof UpdateOrderDto
   */
  goods_type: string;
  /**
   * 商品价格
   * @type {number}
   * @memberof UpdateOrderDto
   */
  goods_price: number;
  /**
   * 商品数量
   * @type {number}
   * @memberof UpdateOrderDto
   */
  goods_count: number;
  /**
   * 收件人id
   * @type {number}
   * @memberof UpdateOrderDto
   */
  receiver_id: number;
  /**
   * 订单状态
   * @type {number}
   * @memberof UpdateOrderDto
   */
  status: number;
  /**
   * 优惠券信息
   * @type {string}
   * @memberof UpdateOrderDto
   */
  coupon: string;
  /**
   * 扩展字段
   * @type {object}
   * @memberof UpdateOrderDto
   */
  ext: object;
  /**
   * 订单ID
   * @type {number}
   * @memberof UpdateOrderDto
   */
  id: number;
}
/**
 *
 * @export
 * @interface UpdateOrderStatusDto
 */
export interface UpdateOrderStatusDto {
  /**
   * 需要更新状态的用户ID列表
   * @type {Array<number>}
   * @memberof UpdateOrderStatusDto
   */
  ids: Array<number>;
  /**
   * 订单状态
   * @type {number}
   * @memberof UpdateOrderStatusDto
   */
  status: number;
}
/**
 *
 * @export
 * @interface UpdateParamConfigDto
 */
export interface UpdateParamConfigDto {
  /**
   * 配置编号
   * @type {number}
   * @memberof UpdateParamConfigDto
   */
  id: number;
  /**
   * 参数名称
   * @type {string}
   * @memberof UpdateParamConfigDto
   */
  name: string;
  /**
   * 参数值
   * @type {string}
   * @memberof UpdateParamConfigDto
   */
  value: string;
  /**
   * 备注
   * @type {string}
   * @memberof UpdateParamConfigDto
   */
  remark?: string;
}
/**
 *
 * @export
 * @interface UpdatePasswordDto
 */
export interface UpdatePasswordDto {
  /**
   * 更改前的密码
   * @type {string}
   * @memberof UpdatePasswordDto
   */
  originPassword: string;
  /**
   * 更改后的密码
   * @type {string}
   * @memberof UpdatePasswordDto
   */
  newPassword: string;
}
/**
 *
 * @export
 * @interface UpdatePersonInfoDto
 */
export interface UpdatePersonInfoDto {
  /**
   * 管理员昵称
   * @type {string}
   * @memberof UpdatePersonInfoDto
   */
  nickName?: string;
  /**
   * 邮箱
   * @type {string}
   * @memberof UpdatePersonInfoDto
   */
  email?: string;
  /**
   * 手机
   * @type {string}
   * @memberof UpdatePersonInfoDto
   */
  phone?: string;
  /**
   * 备注
   * @type {string}
   * @memberof UpdatePersonInfoDto
   */
  remark?: string;
}
/**
 *
 * @export
 * @interface UpdateReceiverDto
 */
export interface UpdateReceiverDto {
  /**
   * 用户姓名
   * @type {string}
   * @memberof UpdateReceiverDto
   */
  name: string;
  /**
   * 省份信息
   * @type {string}
   * @memberof UpdateReceiverDto
   */
  province: string;
  /**
   * 城市信息
   * @type {string}
   * @memberof UpdateReceiverDto
   */
  city: string;
  /**
   * 区县信息
   * @type {string}
   * @memberof UpdateReceiverDto
   */
  area: string;
  /**
   * 区县code
   * @type {string}
   * @memberof UpdateReceiverDto
   */
  area_code: string;
  /**
   * 邮编
   * @type {string}
   * @memberof UpdateReceiverDto
   */
  postal_code: string;
  /**
   * 详细地址信息
   * @type {string}
   * @memberof UpdateReceiverDto
   */
  detail: string;
  /**
   * 邮箱
   * @type {string}
   * @memberof UpdateReceiverDto
   */
  email?: string;
  /**
   * 手机号
   * @type {string}
   * @memberof UpdateReceiverDto
   */
  phone?: string;
  /**
   * 备注
   * @type {string}
   * @memberof UpdateReceiverDto
   */
  remark?: string;
  /**
   * 呢称
   * @type {string}
   * @memberof UpdateReceiverDto
   */
  nick_name?: string;
  /**
   * 收件人ID
   * @type {number}
   * @memberof UpdateReceiverDto
   */
  id: number;
}
/**
 *
 * @export
 * @interface UpdateRoleDto
 */
export interface UpdateRoleDto {
  /**
   * 角色名称
   * @type {string}
   * @memberof UpdateRoleDto
   */
  name: string;
  /**
   * 角色唯一标识
   * @type {string}
   * @memberof UpdateRoleDto
   */
  label: string;
  /**
   * 角色备注
   * @type {string}
   * @memberof UpdateRoleDto
   */
  remark?: string;
  /**
   * 关联菜单、权限编号
   * @type {Array<string>}
   * @memberof UpdateRoleDto
   */
  menus?: Array<string>;
  /**
   * 关联部门编号
   * @type {Array<string>}
   * @memberof UpdateRoleDto
   */
  depts?: Array<string>;
  /**
   * 关联部门编号
   * @type {number}
   * @memberof UpdateRoleDto
   */
  roleId: number;
}
/**
 *
 * @export
 * @interface UpdateTaskDto
 */
export interface UpdateTaskDto {
  /**
   * 任务名称
   * @type {string}
   * @memberof UpdateTaskDto
   */
  name: string;
  /**
   * 调用的服务
   * @type {string}
   * @memberof UpdateTaskDto
   */
  service: string;
  /**
   * 任务类别：cron | interval
   * @type {number}
   * @memberof UpdateTaskDto
   */
  type: number;
  /**
   * 任务状态
   * @type {number}
   * @memberof UpdateTaskDto
   */
  status: number;
  /**
   * 开始时间
   * @type {string}
   * @memberof UpdateTaskDto
   */
  startTime?: string;
  /**
   * 结束时间
   * @type {string}
   * @memberof UpdateTaskDto
   */
  endTime?: string;
  /**
   * 限制执行次数，负数则无限制
   * @type {number}
   * @memberof UpdateTaskDto
   */
  limit?: number;
  /**
   * cron表达式
   * @type {string}
   * @memberof UpdateTaskDto
   */
  cron: string;
  /**
   * 执行间隔，毫秒单位
   * @type {number}
   * @memberof UpdateTaskDto
   */
  every: number;
  /**
   * 执行参数
   * @type {string}
   * @memberof UpdateTaskDto
   */
  data?: string;
  /**
   * 任务备注
   * @type {string}
   * @memberof UpdateTaskDto
   */
  remark?: string;
  /**
   * 需要更新的任务ID
   * @type {number}
   * @memberof UpdateTaskDto
   */
  id: number;
}
/**
 *
 * @export
 * @interface UpdateUserDto
 */
export interface UpdateUserDto {
  /**
   * 所属部门编号
   * @type {number}
   * @memberof UpdateUserDto
   */
  departmentId: number;
  /**
   * 用户姓名
   * @type {string}
   * @memberof UpdateUserDto
   */
  name: string;
  /**
   * 登录账号
   * @type {string}
   * @memberof UpdateUserDto
   */
  username: string;
  /**
   * 归属角色
   * @type {Array<number>}
   * @memberof UpdateUserDto
   */
  roles: Array<number>;
  /**
   * 呢称
   * @type {string}
   * @memberof UpdateUserDto
   */
  nickName?: string;
  /**
   * 邮箱
   * @type {string}
   * @memberof UpdateUserDto
   */
  email?: string;
  /**
   * 手机号
   * @type {string}
   * @memberof UpdateUserDto
   */
  phone?: string;
  /**
   * 备注
   * @type {string}
   * @memberof UpdateUserDto
   */
  remark?: string;
  /**
   * 状态
   * @type {number}
   * @memberof UpdateUserDto
   */
  status: number;
  /**
   * 用户ID
   * @type {number}
   * @memberof UpdateUserDto
   */
  id: number;
}
/**
 *
 * @export
 * @interface UploadToken
 */
export interface UploadToken {
  /**
   * 上传token
   * @type {string}
   * @memberof UploadToken
   */
  token: string;
}
/**
 *
 * @export
 * @interface UserDetailInfo
 */
export interface UserDetailInfo {
  /**
   *
   * @type {string}
   * @memberof UserDetailInfo
   */
  createdAt: string;
  /**
   *
   * @type {string}
   * @memberof UserDetailInfo
   */
  updatedAt: string;
  /**
   *
   * @type {number}
   * @memberof UserDetailInfo
   */
  id: number;
  /**
   *
   * @type {number}
   * @memberof UserDetailInfo
   */
  departmentId: number;
  /**
   *
   * @type {string}
   * @memberof UserDetailInfo
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof UserDetailInfo
   */
  username: string;
  /**
   *
   * @type {string}
   * @memberof UserDetailInfo
   */
  password: string;
  /**
   *
   * @type {string}
   * @memberof UserDetailInfo
   */
  psalt: string;
  /**
   *
   * @type {string}
   * @memberof UserDetailInfo
   */
  nickName: string;
  /**
   *
   * @type {string}
   * @memberof UserDetailInfo
   */
  headImg: string;
  /**
   *
   * @type {string}
   * @memberof UserDetailInfo
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof UserDetailInfo
   */
  phone: string;
  /**
   *
   * @type {string}
   * @memberof UserDetailInfo
   */
  remark: string;
  /**
   *
   * @type {number}
   * @memberof UserDetailInfo
   */
  status: number;
  /**
   * 关联角色
   * @type {Array<string>}
   * @memberof UserDetailInfo
   */
  roles: Array<string>;
  /**
   * 关联部门名称
   * @type {string}
   * @memberof UserDetailInfo
   */
  departmentName: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 获取管理员资料
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountControllerInfo: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/admin/account/info`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 管理员登出
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountControllerLogout: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/admin/account/logout`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 更改管理员密码
     * @param {UpdatePasswordDto} updatePasswordDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountControllerPassword: async (
      updatePasswordDto: UpdatePasswordDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'updatePasswordDto' is not null or undefined
      assertParamExists('accountControllerPassword', 'updatePasswordDto', updatePasswordDto);
      const localVarPath = `/admin/account/password`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updatePasswordDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 获取菜单列表及权限列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountControllerPermmenu: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/admin/account/permmenu`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 更改管理员资料
     * @param {UpdatePersonInfoDto} updatePersonInfoDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountControllerUpdate: async (
      updatePersonInfoDto: UpdatePersonInfoDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'updatePersonInfoDto' is not null or undefined
      assertParamExists('accountControllerUpdate', 'updatePersonInfoDto', updatePersonInfoDto);
      const localVarPath = `/admin/account/update`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updatePersonInfoDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 新增商品
     * @param {CreateGoodsDto} createGoodsDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    goodsControllerAdd: async (
      createGoodsDto: CreateGoodsDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createGoodsDto' is not null or undefined
      assertParamExists('goodsControllerAdd', 'createGoodsDto', createGoodsDto);
      const localVarPath = `/admin/goods/add`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createGoodsDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 根据ID删除商品
     * @param {DeleteGoodsDto} deleteGoodsDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    goodsControllerDelete: async (
      deleteGoodsDto: DeleteGoodsDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'deleteGoodsDto' is not null or undefined
      assertParamExists('goodsControllerDelete', 'deleteGoodsDto', deleteGoodsDto);
      const localVarPath = `/admin/goods/delete`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteGoodsDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查询商品信息
     * @param {number} id 商品ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    goodsControllerInfo: async (
      id: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('goodsControllerInfo', 'id', id);
      const localVarPath = `/admin/goods/info`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      if (id !== undefined) {
        localVarQueryParameter['id'] = id;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 分页获取商品列表
     * @param {PageSearchGoodsDto} pageSearchGoodsDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    goodsControllerPage: async (
      pageSearchGoodsDto: PageSearchGoodsDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'pageSearchGoodsDto' is not null or undefined
      assertParamExists('goodsControllerPage', 'pageSearchGoodsDto', pageSearchGoodsDto);
      const localVarPath = `/admin/goods/page`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        pageSearchGoodsDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 更新商品信息
     * @param {UpdateGoodsDto} updateGoodsDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    goodsControllerUpdate: async (
      updateGoodsDto: UpdateGoodsDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'updateGoodsDto' is not null or undefined
      assertParamExists('goodsControllerUpdate', 'updateGoodsDto', updateGoodsDto);
      const localVarPath = `/admin/goods/update`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateGoodsDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 获取登录图片验证码
     * @param {number} [width] 验证码宽度
     * @param {number} [height] 验证码高度
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginControllerCaptchaByImg: async (
      width?: number,
      height?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/admin/captcha/img`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (width !== undefined) {
        localVarQueryParameter['width'] = width;
      }

      if (height !== undefined) {
        localVarQueryParameter['height'] = height;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 管理员登录
     * @param {string} userAgent
     * @param {LoginInfoDto} loginInfoDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginControllerLogin: async (
      userAgent: string,
      loginInfoDto: LoginInfoDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userAgent' is not null or undefined
      assertParamExists('loginControllerLogin', 'userAgent', userAgent);
      // verify required parameter 'loginInfoDto' is not null or undefined
      assertParamExists('loginControllerLogin', 'loginInfoDto', loginInfoDto);
      const localVarPath = `/admin/login`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (userAgent != null) {
        localVarHeaderParameter['user-agent'] = String(userAgent);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        loginInfoDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 复制文件或文件夹，支持批量
     * @param {FileOpDto} fileOpDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    netDiskManageControllerCopy: async (
      fileOpDto: FileOpDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'fileOpDto' is not null or undefined
      assertParamExists('netDiskManageControllerCopy', 'fileOpDto', fileOpDto);
      const localVarPath = `/admin/netdisk/manage/copy`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        fileOpDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 剪切文件或文件夹，支持批量
     * @param {FileOpDto} fileOpDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    netDiskManageControllerCut: async (
      fileOpDto: FileOpDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'fileOpDto' is not null or undefined
      assertParamExists('netDiskManageControllerCut', 'fileOpDto', fileOpDto);
      const localVarPath = `/admin/netdisk/manage/cut`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        fileOpDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 删除文件或文件夹
     * @param {DeleteDto} deleteDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    netDiskManageControllerDelete: async (
      deleteDto: DeleteDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'deleteDto' is not null or undefined
      assertParamExists('netDiskManageControllerDelete', 'deleteDto', deleteDto);
      const localVarPath = `/admin/netdisk/manage/delete`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 获取下载链接，不支持下载文件夹
     * @param {FileInfoDto} fileInfoDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    netDiskManageControllerDownload: async (
      fileInfoDto: FileInfoDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'fileInfoDto' is not null or undefined
      assertParamExists('netDiskManageControllerDownload', 'fileInfoDto', fileInfoDto);
      const localVarPath = `/admin/netdisk/manage/download`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        fileInfoDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 获取文件详细信息
     * @param {FileInfoDto} fileInfoDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    netDiskManageControllerInfo: async (
      fileInfoDto: FileInfoDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'fileInfoDto' is not null or undefined
      assertParamExists('netDiskManageControllerInfo', 'fileInfoDto', fileInfoDto);
      const localVarPath = `/admin/netdisk/manage/info`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        fileInfoDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 获取文件列表
     * @param {string} marker 分页标识
     * @param {string} path 当前路径
     * @param {string} [key] 搜索关键字
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    netDiskManageControllerList: async (
      marker: string,
      path: string,
      key?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'marker' is not null or undefined
      assertParamExists('netDiskManageControllerList', 'marker', marker);
      // verify required parameter 'path' is not null or undefined
      assertParamExists('netDiskManageControllerList', 'path', path);
      const localVarPath = `/admin/netdisk/manage/list`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      if (marker !== undefined) {
        localVarQueryParameter['marker'] = marker;
      }

      if (path !== undefined) {
        localVarQueryParameter['path'] = path;
      }

      if (key !== undefined) {
        localVarQueryParameter['key'] = key;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 添加文件备注
     * @param {MarkFileDto} markFileDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    netDiskManageControllerMark: async (
      markFileDto: MarkFileDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'markFileDto' is not null or undefined
      assertParamExists('netDiskManageControllerMark', 'markFileDto', markFileDto);
      const localVarPath = `/admin/netdisk/manage/mark`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        markFileDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 创建文件夹，支持多级
     * @param {MKDirDto} mKDirDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    netDiskManageControllerMkdir: async (
      mKDirDto: MKDirDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'mKDirDto' is not null or undefined
      assertParamExists('netDiskManageControllerMkdir', 'mKDirDto', mKDirDto);
      const localVarPath = `/admin/netdisk/manage/mkdir`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        mKDirDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 重命名文件或文件夹
     * @param {RenameDto} renameDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    netDiskManageControllerRename: async (
      renameDto: RenameDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'renameDto' is not null or undefined
      assertParamExists('netDiskManageControllerRename', 'renameDto', renameDto);
      const localVarPath = `/admin/netdisk/manage/rename`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        renameDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 获取上传Token，无Token前端无法上传
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    netDiskManageControllerToken: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/admin/netdisk/manage/token`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 获取网盘空间数据统计
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    netDiskOverviewControllerSpace: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/admin/netdisk/overview/desc`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 新增订单
     * @param {CreateOrderDto} createOrderDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderControllerAdd: async (
      createOrderDto: CreateOrderDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createOrderDto' is not null or undefined
      assertParamExists('orderControllerAdd', 'createOrderDto', createOrderDto);
      const localVarPath = `/admin/order/add`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createOrderDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 获取当前用户购物车的全部订单列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderControllerCart: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/admin/order/cart`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 根据ID删除订单
     * @param {DeleteorderDto} deleteorderDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderControllerDelete: async (
      deleteorderDto: DeleteorderDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'deleteorderDto' is not null or undefined
      assertParamExists('orderControllerDelete', 'deleteorderDto', deleteorderDto);
      const localVarPath = `/admin/order/delete`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteorderDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查询订单信息
     * @param {number} id 订单ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderControllerInfo: async (
      id: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('orderControllerInfo', 'id', id);
      const localVarPath = `/admin/order/info`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      if (id !== undefined) {
        localVarQueryParameter['id'] = id;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 分页获取订单列表
     * @param {PageSearchorderDto} pageSearchorderDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderControllerPage: async (
      pageSearchorderDto: PageSearchorderDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'pageSearchorderDto' is not null or undefined
      assertParamExists('orderControllerPage', 'pageSearchorderDto', pageSearchorderDto);
      const localVarPath = `/admin/order/page`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        pageSearchorderDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 更新订单信息
     * @param {UpdateOrderDto} updateOrderDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderControllerUpdate: async (
      updateOrderDto: UpdateOrderDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'updateOrderDto' is not null or undefined
      assertParamExists('orderControllerUpdate', 'updateOrderDto', updateOrderDto);
      const localVarPath = `/admin/order/update`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateOrderDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 批量更新订单状态
     * @param {UpdateOrderStatusDto} updateOrderStatusDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderControllerUpdateStatus: async (
      updateOrderStatusDto: UpdateOrderStatusDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'updateOrderStatusDto' is not null or undefined
      assertParamExists(
        'orderControllerUpdateStatus',
        'updateOrderStatusDto',
        updateOrderStatusDto,
      );
      const localVarPath = `/admin/order/updateStatus`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateOrderStatusDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 新增收件人
     * @param {CreateReceiverDto} createReceiverDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    receiverControllerAdd: async (
      createReceiverDto: CreateReceiverDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createReceiverDto' is not null or undefined
      assertParamExists('receiverControllerAdd', 'createReceiverDto', createReceiverDto);
      const localVarPath = `/admin/receiver/add`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createReceiverDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 根据ID删除收件人
     * @param {DeleteReceiverDto} deleteReceiverDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    receiverControllerDelete: async (
      deleteReceiverDto: DeleteReceiverDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'deleteReceiverDto' is not null or undefined
      assertParamExists('receiverControllerDelete', 'deleteReceiverDto', deleteReceiverDto);
      const localVarPath = `/admin/receiver/delete`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteReceiverDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 分页获取收件人列表
     * @param {PageSearchReceiverDto} pageSearchReceiverDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    receiverControllerPage: async (
      pageSearchReceiverDto: PageSearchReceiverDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'pageSearchReceiverDto' is not null or undefined
      assertParamExists('receiverControllerPage', 'pageSearchReceiverDto', pageSearchReceiverDto);
      const localVarPath = `/admin/receiver/page`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        pageSearchReceiverDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 根据ID获取收件人
     * @param {DeleteReceiverDto} deleteReceiverDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    receiverControllerSearch: async (
      deleteReceiverDto: DeleteReceiverDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'deleteReceiverDto' is not null or undefined
      assertParamExists('receiverControllerSearch', 'deleteReceiverDto', deleteReceiverDto);
      const localVarPath = `/admin/receiver/search`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteReceiverDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 更新收件人信息
     * @param {UpdateReceiverDto} updateReceiverDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    receiverControllerUpdate: async (
      updateReceiverDto: UpdateReceiverDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'updateReceiverDto' is not null or undefined
      assertParamExists('receiverControllerUpdate', 'updateReceiverDto', updateReceiverDto);
      const localVarPath = `/admin/receiver/update`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateReceiverDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 创建系统部门
     * @param {CreateDeptDto} createDeptDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysDeptControllerAdd: async (
      createDeptDto: CreateDeptDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createDeptDto' is not null or undefined
      assertParamExists('sysDeptControllerAdd', 'createDeptDto', createDeptDto);
      const localVarPath = `/admin/sys/dept/add`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createDeptDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 删除系统部门
     * @param {DeleteDeptDto} deleteDeptDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysDeptControllerDelete: async (
      deleteDeptDto: DeleteDeptDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'deleteDeptDto' is not null or undefined
      assertParamExists('sysDeptControllerDelete', 'deleteDeptDto', deleteDeptDto);
      const localVarPath = `/admin/sys/dept/delete`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteDeptDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查询单个系统部门信息
     * @param {number} departmentId 查询的系统部门ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysDeptControllerInfo: async (
      departmentId: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'departmentId' is not null or undefined
      assertParamExists('sysDeptControllerInfo', 'departmentId', departmentId);
      const localVarPath = `/admin/sys/dept/info`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      if (departmentId !== undefined) {
        localVarQueryParameter['departmentId'] = departmentId;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 获取系统部门列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysDeptControllerList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/admin/sys/dept/list`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 部门移动排序
     * @param {MoveDeptDto} moveDeptDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysDeptControllerMove: async (
      moveDeptDto: MoveDeptDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'moveDeptDto' is not null or undefined
      assertParamExists('sysDeptControllerMove', 'moveDeptDto', moveDeptDto);
      const localVarPath = `/admin/sys/dept/move`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        moveDeptDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 管理员部门转移
     * @param {TransferDeptDto} transferDeptDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysDeptControllerTransfer: async (
      transferDeptDto: TransferDeptDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'transferDeptDto' is not null or undefined
      assertParamExists('sysDeptControllerTransfer', 'transferDeptDto', transferDeptDto);
      const localVarPath = `/admin/sys/dept/transfer`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        transferDeptDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 更新系统部门
     * @param {UpdateDeptDto} updateDeptDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysDeptControllerUpdate: async (
      updateDeptDto: UpdateDeptDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'updateDeptDto' is not null or undefined
      assertParamExists('sysDeptControllerUpdate', 'updateDeptDto', updateDeptDto);
      const localVarPath = `/admin/sys/dept/update`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateDeptDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 分页查询登录日志
     * @param {number} [limit] 当前页包含数量
     * @param {number} [page] 当前页包含数量
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysLogControllerLoginLogPage: async (
      limit?: number,
      page?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/admin/sys/log/login/page`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit;
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 分页查询任务日志
     * @param {number} [limit] 当前页包含数量
     * @param {number} [page] 当前页包含数量
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysLogControllerTaskPage: async (
      limit?: number,
      page?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/admin/sys/log/task/page`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit;
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 新增菜单或权限
     * @param {CreateMenuDto} createMenuDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysMenuControllerAdd: async (
      createMenuDto: CreateMenuDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createMenuDto' is not null or undefined
      assertParamExists('sysMenuControllerAdd', 'createMenuDto', createMenuDto);
      const localVarPath = `/admin/sys/menu/add`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createMenuDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 删除菜单或权限
     * @param {DeleteMenuDto} deleteMenuDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysMenuControllerDelete: async (
      deleteMenuDto: DeleteMenuDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'deleteMenuDto' is not null or undefined
      assertParamExists('sysMenuControllerDelete', 'deleteMenuDto', deleteMenuDto);
      const localVarPath = `/admin/sys/menu/delete`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteMenuDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 菜单或权限信息
     * @param {number} menuId 查询的菜单ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysMenuControllerInfo: async (
      menuId: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'menuId' is not null or undefined
      assertParamExists('sysMenuControllerInfo', 'menuId', menuId);
      const localVarPath = `/admin/sys/menu/info`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      if (menuId !== undefined) {
        localVarQueryParameter['menuId'] = menuId;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 获取对应权限的菜单列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysMenuControllerList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/admin/sys/menu/list`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 更新菜单或权限
     * @param {UpdateMenuDto} updateMenuDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysMenuControllerUpdate: async (
      updateMenuDto: UpdateMenuDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'updateMenuDto' is not null or undefined
      assertParamExists('sysMenuControllerUpdate', 'updateMenuDto', updateMenuDto);
      const localVarPath = `/admin/sys/menu/update`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateMenuDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 下线指定在线用户
     * @param {KickDto} kickDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysOnlineControllerKick: async (
      kickDto: KickDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'kickDto' is not null or undefined
      assertParamExists('sysOnlineControllerKick', 'kickDto', kickDto);
      const localVarPath = `/admin/sys/online/kick`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        kickDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查询当前在线用户
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysOnlineControllerList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/admin/sys/online/list`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 新增参数配置
     * @param {CreateParamConfigDto} createParamConfigDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysParamConfigControllerAdd: async (
      createParamConfigDto: CreateParamConfigDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createParamConfigDto' is not null or undefined
      assertParamExists(
        'sysParamConfigControllerAdd',
        'createParamConfigDto',
        createParamConfigDto,
      );
      const localVarPath = `/admin/sys/param-config/add`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createParamConfigDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 删除指定的参数配置
     * @param {DeleteParamConfigDto} deleteParamConfigDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysParamConfigControllerDelete: async (
      deleteParamConfigDto: DeleteParamConfigDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'deleteParamConfigDto' is not null or undefined
      assertParamExists(
        'sysParamConfigControllerDelete',
        'deleteParamConfigDto',
        deleteParamConfigDto,
      );
      const localVarPath = `/admin/sys/param-config/delete`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteParamConfigDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查询单个参数配置信息
     * @param {number} id 需要查询的配置编号
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysParamConfigControllerInfo: async (
      id: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('sysParamConfigControllerInfo', 'id', id);
      const localVarPath = `/admin/sys/param-config/info`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      if (id !== undefined) {
        localVarQueryParameter['id'] = id;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 分页获取参数配置列表
     * @param {number} [limit] 当前页包含数量
     * @param {number} [page] 当前页包含数量
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysParamConfigControllerPage: async (
      limit?: number,
      page?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/admin/sys/param-config/page`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit;
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 更新单个参数配置
     * @param {UpdateParamConfigDto} updateParamConfigDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysParamConfigControllerUpdate: async (
      updateParamConfigDto: UpdateParamConfigDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'updateParamConfigDto' is not null or undefined
      assertParamExists(
        'sysParamConfigControllerUpdate',
        'updateParamConfigDto',
        updateParamConfigDto,
      );
      const localVarPath = `/admin/sys/param-config/update`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateParamConfigDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 新增角色
     * @param {CreateRoleDto} createRoleDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysRoleControllerAdd: async (
      createRoleDto: CreateRoleDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createRoleDto' is not null or undefined
      assertParamExists('sysRoleControllerAdd', 'createRoleDto', createRoleDto);
      const localVarPath = `/admin/sys/role/add`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createRoleDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 删除角色
     * @param {DeleteRoleDto} deleteRoleDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysRoleControllerDelete: async (
      deleteRoleDto: DeleteRoleDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'deleteRoleDto' is not null or undefined
      assertParamExists('sysRoleControllerDelete', 'deleteRoleDto', deleteRoleDto);
      const localVarPath = `/admin/sys/role/delete`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteRoleDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 获取角色信息
     * @param {number} roleId 需要查找的角色ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysRoleControllerInfo: async (
      roleId: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'roleId' is not null or undefined
      assertParamExists('sysRoleControllerInfo', 'roleId', roleId);
      const localVarPath = `/admin/sys/role/info`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      if (roleId !== undefined) {
        localVarQueryParameter['roleId'] = roleId;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 获取角色列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysRoleControllerList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/admin/sys/role/list`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 分页查询角色信息
     * @param {number} [limit] 当前页包含数量
     * @param {number} [page] 当前页包含数量
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysRoleControllerPage: async (
      limit?: number,
      page?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/admin/sys/role/page`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit;
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 更新角色
     * @param {UpdateRoleDto} updateRoleDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysRoleControllerUpdate: async (
      updateRoleDto: UpdateRoleDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'updateRoleDto' is not null or undefined
      assertParamExists('sysRoleControllerUpdate', 'updateRoleDto', updateRoleDto);
      const localVarPath = `/admin/sys/role/update`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateRoleDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 获取服务器运行信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysServeControllerStat: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/admin/sys/serve/stat`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 添加任务
     * @param {CreateTaskDto} createTaskDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysTaskControllerAdd: async (
      createTaskDto: CreateTaskDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createTaskDto' is not null or undefined
      assertParamExists('sysTaskControllerAdd', 'createTaskDto', createTaskDto);
      const localVarPath = `/admin/sys/task/add`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createTaskDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 删除任务
     * @param {CheckIdTaskDto} checkIdTaskDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysTaskControllerDelete: async (
      checkIdTaskDto: CheckIdTaskDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'checkIdTaskDto' is not null or undefined
      assertParamExists('sysTaskControllerDelete', 'checkIdTaskDto', checkIdTaskDto);
      const localVarPath = `/admin/sys/task/delete`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        checkIdTaskDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查询任务详细信息
     * @param {number} id 任务ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysTaskControllerInfo: async (
      id: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('sysTaskControllerInfo', 'id', id);
      const localVarPath = `/admin/sys/task/info`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      if (id !== undefined) {
        localVarQueryParameter['id'] = id;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 手动执行一次任务
     * @param {CheckIdTaskDto} checkIdTaskDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysTaskControllerOnce: async (
      checkIdTaskDto: CheckIdTaskDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'checkIdTaskDto' is not null or undefined
      assertParamExists('sysTaskControllerOnce', 'checkIdTaskDto', checkIdTaskDto);
      const localVarPath = `/admin/sys/task/once`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        checkIdTaskDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 获取任务列表
     * @param {number} [limit] 当前页包含数量
     * @param {number} [page] 当前页包含数量
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysTaskControllerPage: async (
      limit?: number,
      page?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/admin/sys/task/page`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit;
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 启动任务
     * @param {CheckIdTaskDto} checkIdTaskDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysTaskControllerStart: async (
      checkIdTaskDto: CheckIdTaskDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'checkIdTaskDto' is not null or undefined
      assertParamExists('sysTaskControllerStart', 'checkIdTaskDto', checkIdTaskDto);
      const localVarPath = `/admin/sys/task/start`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        checkIdTaskDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 停止任务
     * @param {CheckIdTaskDto} checkIdTaskDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysTaskControllerStop: async (
      checkIdTaskDto: CheckIdTaskDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'checkIdTaskDto' is not null or undefined
      assertParamExists('sysTaskControllerStop', 'checkIdTaskDto', checkIdTaskDto);
      const localVarPath = `/admin/sys/task/stop`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        checkIdTaskDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 更新任务
     * @param {UpdateTaskDto} updateTaskDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysTaskControllerUpdate: async (
      updateTaskDto: UpdateTaskDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'updateTaskDto' is not null or undefined
      assertParamExists('sysTaskControllerUpdate', 'updateTaskDto', updateTaskDto);
      const localVarPath = `/admin/sys/task/update`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateTaskDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 新增管理员
     * @param {CreateUserDto} createUserDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysUserControllerAdd: async (
      createUserDto: CreateUserDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createUserDto' is not null or undefined
      assertParamExists('sysUserControllerAdd', 'createUserDto', createUserDto);
      const localVarPath = `/admin/sys/user/add`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createUserDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 根据ID列表删除管理员
     * @param {DeleteUserDto} deleteUserDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysUserControllerDelete: async (
      deleteUserDto: DeleteUserDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'deleteUserDto' is not null or undefined
      assertParamExists('sysUserControllerDelete', 'deleteUserDto', deleteUserDto);
      const localVarPath = `/admin/sys/user/delete`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteUserDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查询管理员信息
     * @param {number} userId 用户ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysUserControllerInfo: async (
      userId: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists('sysUserControllerInfo', 'userId', userId);
      const localVarPath = `/admin/sys/user/info`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      if (userId !== undefined) {
        localVarQueryParameter['userId'] = userId;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 分页获取管理员列表
     * @param {PageSearchUserDto} pageSearchUserDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysUserControllerPage: async (
      pageSearchUserDto: PageSearchUserDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'pageSearchUserDto' is not null or undefined
      assertParamExists('sysUserControllerPage', 'pageSearchUserDto', pageSearchUserDto);
      const localVarPath = `/admin/sys/user/page`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        pageSearchUserDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 更改指定管理员密码
     * @param {PasswordUserDto} passwordUserDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysUserControllerPassword: async (
      passwordUserDto: PasswordUserDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'passwordUserDto' is not null or undefined
      assertParamExists('sysUserControllerPassword', 'passwordUserDto', passwordUserDto);
      const localVarPath = `/admin/sys/user/password`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        passwordUserDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 更新管理员信息
     * @param {UpdateUserDto} updateUserDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysUserControllerUpdate: async (
      updateUserDto: UpdateUserDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'updateUserDto' is not null or undefined
      assertParamExists('sysUserControllerUpdate', 'updateUserDto', updateUserDto);
      const localVarPath = `/admin/sys/user/update`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication admin required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateUserDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 获取管理员资料
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async accountControllerInfo(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountInfo>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.accountControllerInfo(options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.accountControllerInfo']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 管理员登出
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async accountControllerLogout(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.accountControllerLogout(options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.accountControllerLogout']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 更改管理员密码
     * @param {UpdatePasswordDto} updatePasswordDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async accountControllerPassword(
      updatePasswordDto: UpdatePasswordDto,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.accountControllerPassword(
        updatePasswordDto,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.accountControllerPassword']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 获取菜单列表及权限列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async accountControllerPermmenu(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PermMenuInfo>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.accountControllerPermmenu(options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.accountControllerPermmenu']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 更改管理员资料
     * @param {UpdatePersonInfoDto} updatePersonInfoDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async accountControllerUpdate(
      updatePersonInfoDto: UpdatePersonInfoDto,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.accountControllerUpdate(
        updatePersonInfoDto,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.accountControllerUpdate']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 新增商品
     * @param {CreateGoodsDto} createGoodsDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async goodsControllerAdd(
      createGoodsDto: CreateGoodsDto,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.goodsControllerAdd(
        createGoodsDto,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath = operationServerMap['DefaultApi.goodsControllerAdd']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 根据ID删除商品
     * @param {DeleteGoodsDto} deleteGoodsDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async goodsControllerDelete(
      deleteGoodsDto: DeleteGoodsDto,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.goodsControllerDelete(
        deleteGoodsDto,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.goodsControllerDelete']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 查询商品信息
     * @param {number} id 商品ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async goodsControllerInfo(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageSearchGoodsInfo>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.goodsControllerInfo(id, options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath = operationServerMap['DefaultApi.goodsControllerInfo']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 分页获取商品列表
     * @param {PageSearchGoodsDto} pageSearchGoodsDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async goodsControllerPage(
      pageSearchGoodsDto: PageSearchGoodsDto,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.goodsControllerPage(
        pageSearchGoodsDto,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath = operationServerMap['DefaultApi.goodsControllerPage']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 更新商品信息
     * @param {UpdateGoodsDto} updateGoodsDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async goodsControllerUpdate(
      updateGoodsDto: UpdateGoodsDto,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.goodsControllerUpdate(
        updateGoodsDto,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.goodsControllerUpdate']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 获取登录图片验证码
     * @param {number} [width] 验证码宽度
     * @param {number} [height] 验证码高度
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async loginControllerCaptchaByImg(
      width?: number,
      height?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageCaptcha>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.loginControllerCaptchaByImg(
        width,
        height,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.loginControllerCaptchaByImg']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 管理员登录
     * @param {string} userAgent
     * @param {LoginInfoDto} loginInfoDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async loginControllerLogin(
      userAgent: string,
      loginInfoDto: LoginInfoDto,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginToken>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.loginControllerLogin(
        userAgent,
        loginInfoDto,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath = operationServerMap['DefaultApi.loginControllerLogin']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 复制文件或文件夹，支持批量
     * @param {FileOpDto} fileOpDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async netDiskManageControllerCopy(
      fileOpDto: FileOpDto,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.netDiskManageControllerCopy(
        fileOpDto,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.netDiskManageControllerCopy']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 剪切文件或文件夹，支持批量
     * @param {FileOpDto} fileOpDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async netDiskManageControllerCut(
      fileOpDto: FileOpDto,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.netDiskManageControllerCut(
        fileOpDto,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.netDiskManageControllerCut']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 删除文件或文件夹
     * @param {DeleteDto} deleteDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async netDiskManageControllerDelete(
      deleteDto: DeleteDto,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.netDiskManageControllerDelete(
        deleteDto,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.netDiskManageControllerDelete']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 获取下载链接，不支持下载文件夹
     * @param {FileInfoDto} fileInfoDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async netDiskManageControllerDownload(
      fileInfoDto: FileInfoDto,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.netDiskManageControllerDownload(
        fileInfoDto,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.netDiskManageControllerDownload']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 获取文件详细信息
     * @param {FileInfoDto} fileInfoDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async netDiskManageControllerInfo(
      fileInfoDto: FileInfoDto,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SFileInfoDetail>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.netDiskManageControllerInfo(
        fileInfoDto,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.netDiskManageControllerInfo']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 获取文件列表
     * @param {string} marker 分页标识
     * @param {string} path 当前路径
     * @param {string} [key] 搜索关键字
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async netDiskManageControllerList(
      marker: string,
      path: string,
      key?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SFileList>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.netDiskManageControllerList(
        marker,
        path,
        key,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.netDiskManageControllerList']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 添加文件备注
     * @param {MarkFileDto} markFileDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async netDiskManageControllerMark(
      markFileDto: MarkFileDto,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.netDiskManageControllerMark(
        markFileDto,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.netDiskManageControllerMark']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 创建文件夹，支持多级
     * @param {MKDirDto} mKDirDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async netDiskManageControllerMkdir(
      mKDirDto: MKDirDto,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.netDiskManageControllerMkdir(
        mKDirDto,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.netDiskManageControllerMkdir']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 重命名文件或文件夹
     * @param {RenameDto} renameDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async netDiskManageControllerRename(
      renameDto: RenameDto,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.netDiskManageControllerRename(
        renameDto,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.netDiskManageControllerRename']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 获取上传Token，无Token前端无法上传
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async netDiskManageControllerToken(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadToken>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.netDiskManageControllerToken(options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.netDiskManageControllerToken']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 获取网盘空间数据统计
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async netDiskOverviewControllerSpace(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OverviewSpaceInfo>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.netDiskOverviewControllerSpace(options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.netDiskOverviewControllerSpace']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 新增订单
     * @param {CreateOrderDto} createOrderDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async orderControllerAdd(
      createOrderDto: CreateOrderDto,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerAdd(
        createOrderDto,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath = operationServerMap['DefaultApi.orderControllerAdd']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 获取当前用户购物车的全部订单列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async orderControllerCart(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerCart(options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath = operationServerMap['DefaultApi.orderControllerCart']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 根据ID删除订单
     * @param {DeleteorderDto} deleteorderDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async orderControllerDelete(
      deleteorderDto: DeleteorderDto,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerDelete(
        deleteorderDto,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.orderControllerDelete']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 查询订单信息
     * @param {number} id 订单ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async orderControllerInfo(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageSearchOrderInfo>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerInfo(id, options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath = operationServerMap['DefaultApi.orderControllerInfo']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 分页获取订单列表
     * @param {PageSearchorderDto} pageSearchorderDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async orderControllerPage(
      pageSearchorderDto: PageSearchorderDto,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerPage(
        pageSearchorderDto,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath = operationServerMap['DefaultApi.orderControllerPage']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 更新订单信息
     * @param {UpdateOrderDto} updateOrderDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async orderControllerUpdate(
      updateOrderDto: UpdateOrderDto,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerUpdate(
        updateOrderDto,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.orderControllerUpdate']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 批量更新订单状态
     * @param {UpdateOrderStatusDto} updateOrderStatusDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async orderControllerUpdateStatus(
      updateOrderStatusDto: UpdateOrderStatusDto,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerUpdateStatus(
        updateOrderStatusDto,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.orderControllerUpdateStatus']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 新增收件人
     * @param {CreateReceiverDto} createReceiverDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async receiverControllerAdd(
      createReceiverDto: CreateReceiverDto,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.receiverControllerAdd(
        createReceiverDto,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.receiverControllerAdd']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 根据ID删除收件人
     * @param {DeleteReceiverDto} deleteReceiverDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async receiverControllerDelete(
      deleteReceiverDto: DeleteReceiverDto,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.receiverControllerDelete(
        deleteReceiverDto,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.receiverControllerDelete']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 分页获取收件人列表
     * @param {PageSearchReceiverDto} pageSearchReceiverDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async receiverControllerPage(
      pageSearchReceiverDto: PageSearchReceiverDto,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.receiverControllerPage(
        pageSearchReceiverDto,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.receiverControllerPage']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 根据ID获取收件人
     * @param {DeleteReceiverDto} deleteReceiverDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async receiverControllerSearch(
      deleteReceiverDto: DeleteReceiverDto,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.receiverControllerSearch(
        deleteReceiverDto,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.receiverControllerSearch']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 更新收件人信息
     * @param {UpdateReceiverDto} updateReceiverDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async receiverControllerUpdate(
      updateReceiverDto: UpdateReceiverDto,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.receiverControllerUpdate(
        updateReceiverDto,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.receiverControllerUpdate']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 创建系统部门
     * @param {CreateDeptDto} createDeptDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sysDeptControllerAdd(
      createDeptDto: CreateDeptDto,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sysDeptControllerAdd(
        createDeptDto,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath = operationServerMap['DefaultApi.sysDeptControllerAdd']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 删除系统部门
     * @param {DeleteDeptDto} deleteDeptDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sysDeptControllerDelete(
      deleteDeptDto: DeleteDeptDto,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sysDeptControllerDelete(
        deleteDeptDto,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.sysDeptControllerDelete']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 查询单个系统部门信息
     * @param {number} departmentId 查询的系统部门ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sysDeptControllerInfo(
      departmentId: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeptDetailInfo>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sysDeptControllerInfo(
        departmentId,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.sysDeptControllerInfo']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 获取系统部门列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sysDeptControllerList(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SysDepartment>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sysDeptControllerList(options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.sysDeptControllerList']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 部门移动排序
     * @param {MoveDeptDto} moveDeptDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sysDeptControllerMove(
      moveDeptDto: MoveDeptDto,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sysDeptControllerMove(
        moveDeptDto,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.sysDeptControllerMove']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 管理员部门转移
     * @param {TransferDeptDto} transferDeptDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sysDeptControllerTransfer(
      transferDeptDto: TransferDeptDto,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sysDeptControllerTransfer(
        transferDeptDto,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.sysDeptControllerTransfer']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 更新系统部门
     * @param {UpdateDeptDto} updateDeptDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sysDeptControllerUpdate(
      updateDeptDto: UpdateDeptDto,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sysDeptControllerUpdate(
        updateDeptDto,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.sysDeptControllerUpdate']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 分页查询登录日志
     * @param {number} [limit] 当前页包含数量
     * @param {number} [page] 当前页包含数量
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sysLogControllerLoginLogPage(
      limit?: number,
      page?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<SysLogControllerLoginLogPage200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sysLogControllerLoginLogPage(
        limit,
        page,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.sysLogControllerLoginLogPage']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 分页查询任务日志
     * @param {number} [limit] 当前页包含数量
     * @param {number} [page] 当前页包含数量
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sysLogControllerTaskPage(
      limit?: number,
      page?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TaskLogInfo>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sysLogControllerTaskPage(
        limit,
        page,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.sysLogControllerTaskPage']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 新增菜单或权限
     * @param {CreateMenuDto} createMenuDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sysMenuControllerAdd(
      createMenuDto: CreateMenuDto,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sysMenuControllerAdd(
        createMenuDto,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath = operationServerMap['DefaultApi.sysMenuControllerAdd']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 删除菜单或权限
     * @param {DeleteMenuDto} deleteMenuDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sysMenuControllerDelete(
      deleteMenuDto: DeleteMenuDto,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sysMenuControllerDelete(
        deleteMenuDto,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.sysMenuControllerDelete']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 菜单或权限信息
     * @param {number} menuId 查询的菜单ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sysMenuControllerInfo(
      menuId: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MenuItemAndParentInfoResult>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sysMenuControllerInfo(
        menuId,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.sysMenuControllerInfo']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 获取对应权限的菜单列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sysMenuControllerList(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SysMenu>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sysMenuControllerList(options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.sysMenuControllerList']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 更新菜单或权限
     * @param {UpdateMenuDto} updateMenuDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sysMenuControllerUpdate(
      updateMenuDto: UpdateMenuDto,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sysMenuControllerUpdate(
        updateMenuDto,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.sysMenuControllerUpdate']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 下线指定在线用户
     * @param {KickDto} kickDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sysOnlineControllerKick(
      kickDto: KickDto,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sysOnlineControllerKick(
        kickDto,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.sysOnlineControllerKick']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 查询当前在线用户
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sysOnlineControllerList(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OnlineUserInfo>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sysOnlineControllerList(options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.sysOnlineControllerList']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 新增参数配置
     * @param {CreateParamConfigDto} createParamConfigDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sysParamConfigControllerAdd(
      createParamConfigDto: CreateParamConfigDto,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sysParamConfigControllerAdd(
        createParamConfigDto,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.sysParamConfigControllerAdd']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 删除指定的参数配置
     * @param {DeleteParamConfigDto} deleteParamConfigDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sysParamConfigControllerDelete(
      deleteParamConfigDto: DeleteParamConfigDto,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sysParamConfigControllerDelete(
        deleteParamConfigDto,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.sysParamConfigControllerDelete']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 查询单个参数配置信息
     * @param {number} id 需要查询的配置编号
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sysParamConfigControllerInfo(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SysConfig>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sysParamConfigControllerInfo(
        id,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.sysParamConfigControllerInfo']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 分页获取参数配置列表
     * @param {number} [limit] 当前页包含数量
     * @param {number} [page] 当前页包含数量
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sysParamConfigControllerPage(
      limit?: number,
      page?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SysConfig>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sysParamConfigControllerPage(
        limit,
        page,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.sysParamConfigControllerPage']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 更新单个参数配置
     * @param {UpdateParamConfigDto} updateParamConfigDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sysParamConfigControllerUpdate(
      updateParamConfigDto: UpdateParamConfigDto,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sysParamConfigControllerUpdate(
        updateParamConfigDto,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.sysParamConfigControllerUpdate']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 新增角色
     * @param {CreateRoleDto} createRoleDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sysRoleControllerAdd(
      createRoleDto: CreateRoleDto,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sysRoleControllerAdd(
        createRoleDto,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath = operationServerMap['DefaultApi.sysRoleControllerAdd']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 删除角色
     * @param {DeleteRoleDto} deleteRoleDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sysRoleControllerDelete(
      deleteRoleDto: DeleteRoleDto,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sysRoleControllerDelete(
        deleteRoleDto,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.sysRoleControllerDelete']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 获取角色信息
     * @param {number} roleId 需要查找的角色ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sysRoleControllerInfo(
      roleId: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleInfo>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sysRoleControllerInfo(
        roleId,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.sysRoleControllerInfo']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 获取角色列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sysRoleControllerList(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SysRole>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sysRoleControllerList(options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.sysRoleControllerList']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 分页查询角色信息
     * @param {number} [limit] 当前页包含数量
     * @param {number} [page] 当前页包含数量
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sysRoleControllerPage(
      limit?: number,
      page?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SysRole>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sysRoleControllerPage(
        limit,
        page,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.sysRoleControllerPage']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 更新角色
     * @param {UpdateRoleDto} updateRoleDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sysRoleControllerUpdate(
      updateRoleDto: UpdateRoleDto,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sysRoleControllerUpdate(
        updateRoleDto,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.sysRoleControllerUpdate']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 获取服务器运行信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sysServeControllerStat(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServeStatInfo>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sysServeControllerStat(options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.sysServeControllerStat']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 添加任务
     * @param {CreateTaskDto} createTaskDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sysTaskControllerAdd(
      createTaskDto: CreateTaskDto,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sysTaskControllerAdd(
        createTaskDto,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath = operationServerMap['DefaultApi.sysTaskControllerAdd']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 删除任务
     * @param {CheckIdTaskDto} checkIdTaskDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sysTaskControllerDelete(
      checkIdTaskDto: CheckIdTaskDto,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sysTaskControllerDelete(
        checkIdTaskDto,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.sysTaskControllerDelete']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 查询任务详细信息
     * @param {number} id 任务ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sysTaskControllerInfo(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SysTask>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sysTaskControllerInfo(id, options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.sysTaskControllerInfo']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 手动执行一次任务
     * @param {CheckIdTaskDto} checkIdTaskDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sysTaskControllerOnce(
      checkIdTaskDto: CheckIdTaskDto,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sysTaskControllerOnce(
        checkIdTaskDto,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.sysTaskControllerOnce']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 获取任务列表
     * @param {number} [limit] 当前页包含数量
     * @param {number} [page] 当前页包含数量
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sysTaskControllerPage(
      limit?: number,
      page?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SysTask>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sysTaskControllerPage(
        limit,
        page,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.sysTaskControllerPage']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 启动任务
     * @param {CheckIdTaskDto} checkIdTaskDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sysTaskControllerStart(
      checkIdTaskDto: CheckIdTaskDto,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sysTaskControllerStart(
        checkIdTaskDto,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.sysTaskControllerStart']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 停止任务
     * @param {CheckIdTaskDto} checkIdTaskDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sysTaskControllerStop(
      checkIdTaskDto: CheckIdTaskDto,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sysTaskControllerStop(
        checkIdTaskDto,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.sysTaskControllerStop']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 更新任务
     * @param {UpdateTaskDto} updateTaskDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sysTaskControllerUpdate(
      updateTaskDto: UpdateTaskDto,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sysTaskControllerUpdate(
        updateTaskDto,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.sysTaskControllerUpdate']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 新增管理员
     * @param {CreateUserDto} createUserDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sysUserControllerAdd(
      createUserDto: CreateUserDto,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sysUserControllerAdd(
        createUserDto,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath = operationServerMap['DefaultApi.sysUserControllerAdd']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 根据ID列表删除管理员
     * @param {DeleteUserDto} deleteUserDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sysUserControllerDelete(
      deleteUserDto: DeleteUserDto,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sysUserControllerDelete(
        deleteUserDto,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.sysUserControllerDelete']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 查询管理员信息
     * @param {number} userId 用户ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sysUserControllerInfo(
      userId: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDetailInfo>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sysUserControllerInfo(
        userId,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.sysUserControllerInfo']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 分页获取管理员列表
     * @param {PageSearchUserDto} pageSearchUserDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sysUserControllerPage(
      pageSearchUserDto: PageSearchUserDto,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PageSearchUserInfo>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sysUserControllerPage(
        pageSearchUserDto,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.sysUserControllerPage']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 更改指定管理员密码
     * @param {PasswordUserDto} passwordUserDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sysUserControllerPassword(
      passwordUserDto: PasswordUserDto,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sysUserControllerPassword(
        passwordUserDto,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.sysUserControllerPassword']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary 更新管理员信息
     * @param {UpdateUserDto} updateUserDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sysUserControllerUpdate(
      updateUserDto: UpdateUserDto,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sysUserControllerUpdate(
        updateUserDto,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['DefaultApi.sysUserControllerUpdate']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = DefaultApiFp(configuration);
  return {
    /**
     *
     * @summary 获取管理员资料
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountControllerInfo(options?: any): AxiosPromise<AccountInfo> {
      return localVarFp.accountControllerInfo(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 管理员登出
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountControllerLogout(options?: any): AxiosPromise<void> {
      return localVarFp
        .accountControllerLogout(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 更改管理员密码
     * @param {UpdatePasswordDto} updatePasswordDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountControllerPassword(
      updatePasswordDto: UpdatePasswordDto,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .accountControllerPassword(updatePasswordDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 获取菜单列表及权限列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountControllerPermmenu(options?: any): AxiosPromise<PermMenuInfo> {
      return localVarFp
        .accountControllerPermmenu(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 更改管理员资料
     * @param {UpdatePersonInfoDto} updatePersonInfoDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountControllerUpdate(
      updatePersonInfoDto: UpdatePersonInfoDto,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .accountControllerUpdate(updatePersonInfoDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 新增商品
     * @param {CreateGoodsDto} createGoodsDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    goodsControllerAdd(createGoodsDto: CreateGoodsDto, options?: any): AxiosPromise<void> {
      return localVarFp
        .goodsControllerAdd(createGoodsDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 根据ID删除商品
     * @param {DeleteGoodsDto} deleteGoodsDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    goodsControllerDelete(deleteGoodsDto: DeleteGoodsDto, options?: any): AxiosPromise<void> {
      return localVarFp
        .goodsControllerDelete(deleteGoodsDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查询商品信息
     * @param {number} id 商品ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    goodsControllerInfo(id: number, options?: any): AxiosPromise<PageSearchGoodsInfo> {
      return localVarFp
        .goodsControllerInfo(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 分页获取商品列表
     * @param {PageSearchGoodsDto} pageSearchGoodsDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    goodsControllerPage(pageSearchGoodsDto: PageSearchGoodsDto, options?: any): AxiosPromise<void> {
      return localVarFp
        .goodsControllerPage(pageSearchGoodsDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 更新商品信息
     * @param {UpdateGoodsDto} updateGoodsDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    goodsControllerUpdate(updateGoodsDto: UpdateGoodsDto, options?: any): AxiosPromise<void> {
      return localVarFp
        .goodsControllerUpdate(updateGoodsDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 获取登录图片验证码
     * @param {number} [width] 验证码宽度
     * @param {number} [height] 验证码高度
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginControllerCaptchaByImg(
      width?: number,
      height?: number,
      options?: any,
    ): AxiosPromise<ImageCaptcha> {
      return localVarFp
        .loginControllerCaptchaByImg(width, height, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 管理员登录
     * @param {string} userAgent
     * @param {LoginInfoDto} loginInfoDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginControllerLogin(
      userAgent: string,
      loginInfoDto: LoginInfoDto,
      options?: any,
    ): AxiosPromise<LoginToken> {
      return localVarFp
        .loginControllerLogin(userAgent, loginInfoDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 复制文件或文件夹，支持批量
     * @param {FileOpDto} fileOpDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    netDiskManageControllerCopy(fileOpDto: FileOpDto, options?: any): AxiosPromise<void> {
      return localVarFp
        .netDiskManageControllerCopy(fileOpDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 剪切文件或文件夹，支持批量
     * @param {FileOpDto} fileOpDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    netDiskManageControllerCut(fileOpDto: FileOpDto, options?: any): AxiosPromise<void> {
      return localVarFp
        .netDiskManageControllerCut(fileOpDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 删除文件或文件夹
     * @param {DeleteDto} deleteDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    netDiskManageControllerDelete(deleteDto: DeleteDto, options?: any): AxiosPromise<void> {
      return localVarFp
        .netDiskManageControllerDelete(deleteDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 获取下载链接，不支持下载文件夹
     * @param {FileInfoDto} fileInfoDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    netDiskManageControllerDownload(fileInfoDto: FileInfoDto, options?: any): AxiosPromise<string> {
      return localVarFp
        .netDiskManageControllerDownload(fileInfoDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 获取文件详细信息
     * @param {FileInfoDto} fileInfoDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    netDiskManageControllerInfo(
      fileInfoDto: FileInfoDto,
      options?: any,
    ): AxiosPromise<SFileInfoDetail> {
      return localVarFp
        .netDiskManageControllerInfo(fileInfoDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 获取文件列表
     * @param {string} marker 分页标识
     * @param {string} path 当前路径
     * @param {string} [key] 搜索关键字
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    netDiskManageControllerList(
      marker: string,
      path: string,
      key?: string,
      options?: any,
    ): AxiosPromise<SFileList> {
      return localVarFp
        .netDiskManageControllerList(marker, path, key, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 添加文件备注
     * @param {MarkFileDto} markFileDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    netDiskManageControllerMark(markFileDto: MarkFileDto, options?: any): AxiosPromise<void> {
      return localVarFp
        .netDiskManageControllerMark(markFileDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 创建文件夹，支持多级
     * @param {MKDirDto} mKDirDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    netDiskManageControllerMkdir(mKDirDto: MKDirDto, options?: any): AxiosPromise<void> {
      return localVarFp
        .netDiskManageControllerMkdir(mKDirDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 重命名文件或文件夹
     * @param {RenameDto} renameDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    netDiskManageControllerRename(renameDto: RenameDto, options?: any): AxiosPromise<void> {
      return localVarFp
        .netDiskManageControllerRename(renameDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 获取上传Token，无Token前端无法上传
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    netDiskManageControllerToken(options?: any): AxiosPromise<UploadToken> {
      return localVarFp
        .netDiskManageControllerToken(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 获取网盘空间数据统计
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    netDiskOverviewControllerSpace(options?: any): AxiosPromise<OverviewSpaceInfo> {
      return localVarFp
        .netDiskOverviewControllerSpace(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 新增订单
     * @param {CreateOrderDto} createOrderDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderControllerAdd(createOrderDto: CreateOrderDto, options?: any): AxiosPromise<void> {
      return localVarFp
        .orderControllerAdd(createOrderDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 获取当前用户购物车的全部订单列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderControllerCart(options?: any): AxiosPromise<void> {
      return localVarFp.orderControllerCart(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 根据ID删除订单
     * @param {DeleteorderDto} deleteorderDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderControllerDelete(deleteorderDto: DeleteorderDto, options?: any): AxiosPromise<void> {
      return localVarFp
        .orderControllerDelete(deleteorderDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查询订单信息
     * @param {number} id 订单ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderControllerInfo(id: number, options?: any): AxiosPromise<PageSearchOrderInfo> {
      return localVarFp
        .orderControllerInfo(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 分页获取订单列表
     * @param {PageSearchorderDto} pageSearchorderDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderControllerPage(pageSearchorderDto: PageSearchorderDto, options?: any): AxiosPromise<void> {
      return localVarFp
        .orderControllerPage(pageSearchorderDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 更新订单信息
     * @param {UpdateOrderDto} updateOrderDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderControllerUpdate(updateOrderDto: UpdateOrderDto, options?: any): AxiosPromise<void> {
      return localVarFp
        .orderControllerUpdate(updateOrderDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 批量更新订单状态
     * @param {UpdateOrderStatusDto} updateOrderStatusDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderControllerUpdateStatus(
      updateOrderStatusDto: UpdateOrderStatusDto,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .orderControllerUpdateStatus(updateOrderStatusDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 新增收件人
     * @param {CreateReceiverDto} createReceiverDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    receiverControllerAdd(createReceiverDto: CreateReceiverDto, options?: any): AxiosPromise<void> {
      return localVarFp
        .receiverControllerAdd(createReceiverDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 根据ID删除收件人
     * @param {DeleteReceiverDto} deleteReceiverDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    receiverControllerDelete(
      deleteReceiverDto: DeleteReceiverDto,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .receiverControllerDelete(deleteReceiverDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 分页获取收件人列表
     * @param {PageSearchReceiverDto} pageSearchReceiverDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    receiverControllerPage(
      pageSearchReceiverDto: PageSearchReceiverDto,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .receiverControllerPage(pageSearchReceiverDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 根据ID获取收件人
     * @param {DeleteReceiverDto} deleteReceiverDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    receiverControllerSearch(
      deleteReceiverDto: DeleteReceiverDto,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .receiverControllerSearch(deleteReceiverDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 更新收件人信息
     * @param {UpdateReceiverDto} updateReceiverDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    receiverControllerUpdate(
      updateReceiverDto: UpdateReceiverDto,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .receiverControllerUpdate(updateReceiverDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 创建系统部门
     * @param {CreateDeptDto} createDeptDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysDeptControllerAdd(createDeptDto: CreateDeptDto, options?: any): AxiosPromise<void> {
      return localVarFp
        .sysDeptControllerAdd(createDeptDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 删除系统部门
     * @param {DeleteDeptDto} deleteDeptDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysDeptControllerDelete(deleteDeptDto: DeleteDeptDto, options?: any): AxiosPromise<void> {
      return localVarFp
        .sysDeptControllerDelete(deleteDeptDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查询单个系统部门信息
     * @param {number} departmentId 查询的系统部门ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysDeptControllerInfo(departmentId: number, options?: any): AxiosPromise<DeptDetailInfo> {
      return localVarFp
        .sysDeptControllerInfo(departmentId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 获取系统部门列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysDeptControllerList(options?: any): AxiosPromise<Array<SysDepartment>> {
      return localVarFp.sysDeptControllerList(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 部门移动排序
     * @param {MoveDeptDto} moveDeptDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysDeptControllerMove(moveDeptDto: MoveDeptDto, options?: any): AxiosPromise<void> {
      return localVarFp
        .sysDeptControllerMove(moveDeptDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 管理员部门转移
     * @param {TransferDeptDto} transferDeptDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysDeptControllerTransfer(transferDeptDto: TransferDeptDto, options?: any): AxiosPromise<void> {
      return localVarFp
        .sysDeptControllerTransfer(transferDeptDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 更新系统部门
     * @param {UpdateDeptDto} updateDeptDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysDeptControllerUpdate(updateDeptDto: UpdateDeptDto, options?: any): AxiosPromise<void> {
      return localVarFp
        .sysDeptControllerUpdate(updateDeptDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 分页查询登录日志
     * @param {number} [limit] 当前页包含数量
     * @param {number} [page] 当前页包含数量
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysLogControllerLoginLogPage(
      limit?: number,
      page?: number,
      options?: any,
    ): AxiosPromise<SysLogControllerLoginLogPage200Response> {
      return localVarFp
        .sysLogControllerLoginLogPage(limit, page, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 分页查询任务日志
     * @param {number} [limit] 当前页包含数量
     * @param {number} [page] 当前页包含数量
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysLogControllerTaskPage(
      limit?: number,
      page?: number,
      options?: any,
    ): AxiosPromise<Array<TaskLogInfo>> {
      return localVarFp
        .sysLogControllerTaskPage(limit, page, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 新增菜单或权限
     * @param {CreateMenuDto} createMenuDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysMenuControllerAdd(createMenuDto: CreateMenuDto, options?: any): AxiosPromise<void> {
      return localVarFp
        .sysMenuControllerAdd(createMenuDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 删除菜单或权限
     * @param {DeleteMenuDto} deleteMenuDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysMenuControllerDelete(deleteMenuDto: DeleteMenuDto, options?: any): AxiosPromise<void> {
      return localVarFp
        .sysMenuControllerDelete(deleteMenuDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 菜单或权限信息
     * @param {number} menuId 查询的菜单ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysMenuControllerInfo(
      menuId: number,
      options?: any,
    ): AxiosPromise<MenuItemAndParentInfoResult> {
      return localVarFp
        .sysMenuControllerInfo(menuId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 获取对应权限的菜单列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysMenuControllerList(options?: any): AxiosPromise<Array<SysMenu>> {
      return localVarFp.sysMenuControllerList(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 更新菜单或权限
     * @param {UpdateMenuDto} updateMenuDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysMenuControllerUpdate(updateMenuDto: UpdateMenuDto, options?: any): AxiosPromise<void> {
      return localVarFp
        .sysMenuControllerUpdate(updateMenuDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 下线指定在线用户
     * @param {KickDto} kickDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysOnlineControllerKick(kickDto: KickDto, options?: any): AxiosPromise<void> {
      return localVarFp
        .sysOnlineControllerKick(kickDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查询当前在线用户
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysOnlineControllerList(options?: any): AxiosPromise<Array<OnlineUserInfo>> {
      return localVarFp
        .sysOnlineControllerList(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 新增参数配置
     * @param {CreateParamConfigDto} createParamConfigDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysParamConfigControllerAdd(
      createParamConfigDto: CreateParamConfigDto,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .sysParamConfigControllerAdd(createParamConfigDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 删除指定的参数配置
     * @param {DeleteParamConfigDto} deleteParamConfigDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysParamConfigControllerDelete(
      deleteParamConfigDto: DeleteParamConfigDto,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .sysParamConfigControllerDelete(deleteParamConfigDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查询单个参数配置信息
     * @param {number} id 需要查询的配置编号
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysParamConfigControllerInfo(id: number, options?: any): AxiosPromise<SysConfig> {
      return localVarFp
        .sysParamConfigControllerInfo(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 分页获取参数配置列表
     * @param {number} [limit] 当前页包含数量
     * @param {number} [page] 当前页包含数量
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysParamConfigControllerPage(
      limit?: number,
      page?: number,
      options?: any,
    ): AxiosPromise<Array<SysConfig>> {
      return localVarFp
        .sysParamConfigControllerPage(limit, page, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 更新单个参数配置
     * @param {UpdateParamConfigDto} updateParamConfigDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysParamConfigControllerUpdate(
      updateParamConfigDto: UpdateParamConfigDto,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .sysParamConfigControllerUpdate(updateParamConfigDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 新增角色
     * @param {CreateRoleDto} createRoleDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysRoleControllerAdd(createRoleDto: CreateRoleDto, options?: any): AxiosPromise<void> {
      return localVarFp
        .sysRoleControllerAdd(createRoleDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 删除角色
     * @param {DeleteRoleDto} deleteRoleDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysRoleControllerDelete(deleteRoleDto: DeleteRoleDto, options?: any): AxiosPromise<void> {
      return localVarFp
        .sysRoleControllerDelete(deleteRoleDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 获取角色信息
     * @param {number} roleId 需要查找的角色ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysRoleControllerInfo(roleId: number, options?: any): AxiosPromise<RoleInfo> {
      return localVarFp
        .sysRoleControllerInfo(roleId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 获取角色列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysRoleControllerList(options?: any): AxiosPromise<Array<SysRole>> {
      return localVarFp.sysRoleControllerList(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 分页查询角色信息
     * @param {number} [limit] 当前页包含数量
     * @param {number} [page] 当前页包含数量
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysRoleControllerPage(
      limit?: number,
      page?: number,
      options?: any,
    ): AxiosPromise<Array<SysRole>> {
      return localVarFp
        .sysRoleControllerPage(limit, page, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 更新角色
     * @param {UpdateRoleDto} updateRoleDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysRoleControllerUpdate(updateRoleDto: UpdateRoleDto, options?: any): AxiosPromise<void> {
      return localVarFp
        .sysRoleControllerUpdate(updateRoleDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 获取服务器运行信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysServeControllerStat(options?: any): AxiosPromise<ServeStatInfo> {
      return localVarFp.sysServeControllerStat(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 添加任务
     * @param {CreateTaskDto} createTaskDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysTaskControllerAdd(createTaskDto: CreateTaskDto, options?: any): AxiosPromise<void> {
      return localVarFp
        .sysTaskControllerAdd(createTaskDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 删除任务
     * @param {CheckIdTaskDto} checkIdTaskDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysTaskControllerDelete(checkIdTaskDto: CheckIdTaskDto, options?: any): AxiosPromise<void> {
      return localVarFp
        .sysTaskControllerDelete(checkIdTaskDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查询任务详细信息
     * @param {number} id 任务ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysTaskControllerInfo(id: number, options?: any): AxiosPromise<SysTask> {
      return localVarFp
        .sysTaskControllerInfo(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 手动执行一次任务
     * @param {CheckIdTaskDto} checkIdTaskDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysTaskControllerOnce(checkIdTaskDto: CheckIdTaskDto, options?: any): AxiosPromise<void> {
      return localVarFp
        .sysTaskControllerOnce(checkIdTaskDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 获取任务列表
     * @param {number} [limit] 当前页包含数量
     * @param {number} [page] 当前页包含数量
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysTaskControllerPage(
      limit?: number,
      page?: number,
      options?: any,
    ): AxiosPromise<Array<SysTask>> {
      return localVarFp
        .sysTaskControllerPage(limit, page, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 启动任务
     * @param {CheckIdTaskDto} checkIdTaskDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysTaskControllerStart(checkIdTaskDto: CheckIdTaskDto, options?: any): AxiosPromise<void> {
      return localVarFp
        .sysTaskControllerStart(checkIdTaskDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 停止任务
     * @param {CheckIdTaskDto} checkIdTaskDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysTaskControllerStop(checkIdTaskDto: CheckIdTaskDto, options?: any): AxiosPromise<void> {
      return localVarFp
        .sysTaskControllerStop(checkIdTaskDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 更新任务
     * @param {UpdateTaskDto} updateTaskDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysTaskControllerUpdate(updateTaskDto: UpdateTaskDto, options?: any): AxiosPromise<void> {
      return localVarFp
        .sysTaskControllerUpdate(updateTaskDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 新增管理员
     * @param {CreateUserDto} createUserDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysUserControllerAdd(createUserDto: CreateUserDto, options?: any): AxiosPromise<void> {
      return localVarFp
        .sysUserControllerAdd(createUserDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 根据ID列表删除管理员
     * @param {DeleteUserDto} deleteUserDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysUserControllerDelete(deleteUserDto: DeleteUserDto, options?: any): AxiosPromise<void> {
      return localVarFp
        .sysUserControllerDelete(deleteUserDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查询管理员信息
     * @param {number} userId 用户ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysUserControllerInfo(userId: number, options?: any): AxiosPromise<UserDetailInfo> {
      return localVarFp
        .sysUserControllerInfo(userId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 分页获取管理员列表
     * @param {PageSearchUserDto} pageSearchUserDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysUserControllerPage(
      pageSearchUserDto: PageSearchUserDto,
      options?: any,
    ): AxiosPromise<Array<PageSearchUserInfo>> {
      return localVarFp
        .sysUserControllerPage(pageSearchUserDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 更改指定管理员密码
     * @param {PasswordUserDto} passwordUserDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysUserControllerPassword(passwordUserDto: PasswordUserDto, options?: any): AxiosPromise<void> {
      return localVarFp
        .sysUserControllerPassword(passwordUserDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 更新管理员信息
     * @param {UpdateUserDto} updateUserDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sysUserControllerUpdate(updateUserDto: UpdateUserDto, options?: any): AxiosPromise<void> {
      return localVarFp
        .sysUserControllerUpdate(updateUserDto, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   *
   * @summary 获取管理员资料
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public accountControllerInfo(options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .accountControllerInfo(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 管理员登出
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public accountControllerLogout(options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .accountControllerLogout(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 更改管理员密码
   * @param {UpdatePasswordDto} updatePasswordDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public accountControllerPassword(
    updatePasswordDto: UpdatePasswordDto,
    options?: RawAxiosRequestConfig,
  ) {
    return DefaultApiFp(this.configuration)
      .accountControllerPassword(updatePasswordDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 获取菜单列表及权限列表
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public accountControllerPermmenu(options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .accountControllerPermmenu(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 更改管理员资料
   * @param {UpdatePersonInfoDto} updatePersonInfoDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public accountControllerUpdate(
    updatePersonInfoDto: UpdatePersonInfoDto,
    options?: RawAxiosRequestConfig,
  ) {
    return DefaultApiFp(this.configuration)
      .accountControllerUpdate(updatePersonInfoDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 新增商品
   * @param {CreateGoodsDto} createGoodsDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public goodsControllerAdd(createGoodsDto: CreateGoodsDto, options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .goodsControllerAdd(createGoodsDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 根据ID删除商品
   * @param {DeleteGoodsDto} deleteGoodsDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public goodsControllerDelete(deleteGoodsDto: DeleteGoodsDto, options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .goodsControllerDelete(deleteGoodsDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查询商品信息
   * @param {number} id 商品ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public goodsControllerInfo(id: number, options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .goodsControllerInfo(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 分页获取商品列表
   * @param {PageSearchGoodsDto} pageSearchGoodsDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public goodsControllerPage(
    pageSearchGoodsDto: PageSearchGoodsDto,
    options?: RawAxiosRequestConfig,
  ) {
    return DefaultApiFp(this.configuration)
      .goodsControllerPage(pageSearchGoodsDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 更新商品信息
   * @param {UpdateGoodsDto} updateGoodsDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public goodsControllerUpdate(updateGoodsDto: UpdateGoodsDto, options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .goodsControllerUpdate(updateGoodsDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 获取登录图片验证码
   * @param {number} [width] 验证码宽度
   * @param {number} [height] 验证码高度
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public loginControllerCaptchaByImg(
    width?: number,
    height?: number,
    options?: RawAxiosRequestConfig,
  ) {
    return DefaultApiFp(this.configuration)
      .loginControllerCaptchaByImg(width, height, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 管理员登录
   * @param {string} userAgent
   * @param {LoginInfoDto} loginInfoDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public loginControllerLogin(
    userAgent: string,
    loginInfoDto: LoginInfoDto,
    options?: RawAxiosRequestConfig,
  ) {
    return DefaultApiFp(this.configuration)
      .loginControllerLogin(userAgent, loginInfoDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 复制文件或文件夹，支持批量
   * @param {FileOpDto} fileOpDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public netDiskManageControllerCopy(fileOpDto: FileOpDto, options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .netDiskManageControllerCopy(fileOpDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 剪切文件或文件夹，支持批量
   * @param {FileOpDto} fileOpDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public netDiskManageControllerCut(fileOpDto: FileOpDto, options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .netDiskManageControllerCut(fileOpDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 删除文件或文件夹
   * @param {DeleteDto} deleteDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public netDiskManageControllerDelete(deleteDto: DeleteDto, options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .netDiskManageControllerDelete(deleteDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 获取下载链接，不支持下载文件夹
   * @param {FileInfoDto} fileInfoDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public netDiskManageControllerDownload(
    fileInfoDto: FileInfoDto,
    options?: RawAxiosRequestConfig,
  ) {
    return DefaultApiFp(this.configuration)
      .netDiskManageControllerDownload(fileInfoDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 获取文件详细信息
   * @param {FileInfoDto} fileInfoDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public netDiskManageControllerInfo(fileInfoDto: FileInfoDto, options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .netDiskManageControllerInfo(fileInfoDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 获取文件列表
   * @param {string} marker 分页标识
   * @param {string} path 当前路径
   * @param {string} [key] 搜索关键字
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public netDiskManageControllerList(
    marker: string,
    path: string,
    key?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return DefaultApiFp(this.configuration)
      .netDiskManageControllerList(marker, path, key, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 添加文件备注
   * @param {MarkFileDto} markFileDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public netDiskManageControllerMark(markFileDto: MarkFileDto, options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .netDiskManageControllerMark(markFileDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 创建文件夹，支持多级
   * @param {MKDirDto} mKDirDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public netDiskManageControllerMkdir(mKDirDto: MKDirDto, options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .netDiskManageControllerMkdir(mKDirDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 重命名文件或文件夹
   * @param {RenameDto} renameDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public netDiskManageControllerRename(renameDto: RenameDto, options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .netDiskManageControllerRename(renameDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 获取上传Token，无Token前端无法上传
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public netDiskManageControllerToken(options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .netDiskManageControllerToken(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 获取网盘空间数据统计
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public netDiskOverviewControllerSpace(options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .netDiskOverviewControllerSpace(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 新增订单
   * @param {CreateOrderDto} createOrderDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public orderControllerAdd(createOrderDto: CreateOrderDto, options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .orderControllerAdd(createOrderDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 获取当前用户购物车的全部订单列表
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public orderControllerCart(options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .orderControllerCart(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 根据ID删除订单
   * @param {DeleteorderDto} deleteorderDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public orderControllerDelete(deleteorderDto: DeleteorderDto, options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .orderControllerDelete(deleteorderDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查询订单信息
   * @param {number} id 订单ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public orderControllerInfo(id: number, options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .orderControllerInfo(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 分页获取订单列表
   * @param {PageSearchorderDto} pageSearchorderDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public orderControllerPage(
    pageSearchorderDto: PageSearchorderDto,
    options?: RawAxiosRequestConfig,
  ) {
    return DefaultApiFp(this.configuration)
      .orderControllerPage(pageSearchorderDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 更新订单信息
   * @param {UpdateOrderDto} updateOrderDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public orderControllerUpdate(updateOrderDto: UpdateOrderDto, options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .orderControllerUpdate(updateOrderDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 批量更新订单状态
   * @param {UpdateOrderStatusDto} updateOrderStatusDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public orderControllerUpdateStatus(
    updateOrderStatusDto: UpdateOrderStatusDto,
    options?: RawAxiosRequestConfig,
  ) {
    return DefaultApiFp(this.configuration)
      .orderControllerUpdateStatus(updateOrderStatusDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 新增收件人
   * @param {CreateReceiverDto} createReceiverDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public receiverControllerAdd(
    createReceiverDto: CreateReceiverDto,
    options?: RawAxiosRequestConfig,
  ) {
    return DefaultApiFp(this.configuration)
      .receiverControllerAdd(createReceiverDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 根据ID删除收件人
   * @param {DeleteReceiverDto} deleteReceiverDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public receiverControllerDelete(
    deleteReceiverDto: DeleteReceiverDto,
    options?: RawAxiosRequestConfig,
  ) {
    return DefaultApiFp(this.configuration)
      .receiverControllerDelete(deleteReceiverDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 分页获取收件人列表
   * @param {PageSearchReceiverDto} pageSearchReceiverDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public receiverControllerPage(
    pageSearchReceiverDto: PageSearchReceiverDto,
    options?: RawAxiosRequestConfig,
  ) {
    return DefaultApiFp(this.configuration)
      .receiverControllerPage(pageSearchReceiverDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 根据ID获取收件人
   * @param {DeleteReceiverDto} deleteReceiverDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public receiverControllerSearch(
    deleteReceiverDto: DeleteReceiverDto,
    options?: RawAxiosRequestConfig,
  ) {
    return DefaultApiFp(this.configuration)
      .receiverControllerSearch(deleteReceiverDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 更新收件人信息
   * @param {UpdateReceiverDto} updateReceiverDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public receiverControllerUpdate(
    updateReceiverDto: UpdateReceiverDto,
    options?: RawAxiosRequestConfig,
  ) {
    return DefaultApiFp(this.configuration)
      .receiverControllerUpdate(updateReceiverDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 创建系统部门
   * @param {CreateDeptDto} createDeptDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public sysDeptControllerAdd(createDeptDto: CreateDeptDto, options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .sysDeptControllerAdd(createDeptDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 删除系统部门
   * @param {DeleteDeptDto} deleteDeptDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public sysDeptControllerDelete(deleteDeptDto: DeleteDeptDto, options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .sysDeptControllerDelete(deleteDeptDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查询单个系统部门信息
   * @param {number} departmentId 查询的系统部门ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public sysDeptControllerInfo(departmentId: number, options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .sysDeptControllerInfo(departmentId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 获取系统部门列表
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public sysDeptControllerList(options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .sysDeptControllerList(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 部门移动排序
   * @param {MoveDeptDto} moveDeptDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public sysDeptControllerMove(moveDeptDto: MoveDeptDto, options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .sysDeptControllerMove(moveDeptDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 管理员部门转移
   * @param {TransferDeptDto} transferDeptDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public sysDeptControllerTransfer(
    transferDeptDto: TransferDeptDto,
    options?: RawAxiosRequestConfig,
  ) {
    return DefaultApiFp(this.configuration)
      .sysDeptControllerTransfer(transferDeptDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 更新系统部门
   * @param {UpdateDeptDto} updateDeptDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public sysDeptControllerUpdate(updateDeptDto: UpdateDeptDto, options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .sysDeptControllerUpdate(updateDeptDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 分页查询登录日志
   * @param {number} [limit] 当前页包含数量
   * @param {number} [page] 当前页包含数量
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public sysLogControllerLoginLogPage(
    limit?: number,
    page?: number,
    options?: RawAxiosRequestConfig,
  ) {
    return DefaultApiFp(this.configuration)
      .sysLogControllerLoginLogPage(limit, page, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 分页查询任务日志
   * @param {number} [limit] 当前页包含数量
   * @param {number} [page] 当前页包含数量
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public sysLogControllerTaskPage(limit?: number, page?: number, options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .sysLogControllerTaskPage(limit, page, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 新增菜单或权限
   * @param {CreateMenuDto} createMenuDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public sysMenuControllerAdd(createMenuDto: CreateMenuDto, options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .sysMenuControllerAdd(createMenuDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 删除菜单或权限
   * @param {DeleteMenuDto} deleteMenuDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public sysMenuControllerDelete(deleteMenuDto: DeleteMenuDto, options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .sysMenuControllerDelete(deleteMenuDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 菜单或权限信息
   * @param {number} menuId 查询的菜单ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public sysMenuControllerInfo(menuId: number, options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .sysMenuControllerInfo(menuId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 获取对应权限的菜单列表
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public sysMenuControllerList(options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .sysMenuControllerList(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 更新菜单或权限
   * @param {UpdateMenuDto} updateMenuDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public sysMenuControllerUpdate(updateMenuDto: UpdateMenuDto, options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .sysMenuControllerUpdate(updateMenuDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 下线指定在线用户
   * @param {KickDto} kickDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public sysOnlineControllerKick(kickDto: KickDto, options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .sysOnlineControllerKick(kickDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查询当前在线用户
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public sysOnlineControllerList(options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .sysOnlineControllerList(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 新增参数配置
   * @param {CreateParamConfigDto} createParamConfigDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public sysParamConfigControllerAdd(
    createParamConfigDto: CreateParamConfigDto,
    options?: RawAxiosRequestConfig,
  ) {
    return DefaultApiFp(this.configuration)
      .sysParamConfigControllerAdd(createParamConfigDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 删除指定的参数配置
   * @param {DeleteParamConfigDto} deleteParamConfigDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public sysParamConfigControllerDelete(
    deleteParamConfigDto: DeleteParamConfigDto,
    options?: RawAxiosRequestConfig,
  ) {
    return DefaultApiFp(this.configuration)
      .sysParamConfigControllerDelete(deleteParamConfigDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查询单个参数配置信息
   * @param {number} id 需要查询的配置编号
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public sysParamConfigControllerInfo(id: number, options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .sysParamConfigControllerInfo(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 分页获取参数配置列表
   * @param {number} [limit] 当前页包含数量
   * @param {number} [page] 当前页包含数量
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public sysParamConfigControllerPage(
    limit?: number,
    page?: number,
    options?: RawAxiosRequestConfig,
  ) {
    return DefaultApiFp(this.configuration)
      .sysParamConfigControllerPage(limit, page, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 更新单个参数配置
   * @param {UpdateParamConfigDto} updateParamConfigDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public sysParamConfigControllerUpdate(
    updateParamConfigDto: UpdateParamConfigDto,
    options?: RawAxiosRequestConfig,
  ) {
    return DefaultApiFp(this.configuration)
      .sysParamConfigControllerUpdate(updateParamConfigDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 新增角色
   * @param {CreateRoleDto} createRoleDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public sysRoleControllerAdd(createRoleDto: CreateRoleDto, options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .sysRoleControllerAdd(createRoleDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 删除角色
   * @param {DeleteRoleDto} deleteRoleDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public sysRoleControllerDelete(deleteRoleDto: DeleteRoleDto, options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .sysRoleControllerDelete(deleteRoleDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 获取角色信息
   * @param {number} roleId 需要查找的角色ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public sysRoleControllerInfo(roleId: number, options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .sysRoleControllerInfo(roleId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 获取角色列表
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public sysRoleControllerList(options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .sysRoleControllerList(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 分页查询角色信息
   * @param {number} [limit] 当前页包含数量
   * @param {number} [page] 当前页包含数量
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public sysRoleControllerPage(limit?: number, page?: number, options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .sysRoleControllerPage(limit, page, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 更新角色
   * @param {UpdateRoleDto} updateRoleDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public sysRoleControllerUpdate(updateRoleDto: UpdateRoleDto, options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .sysRoleControllerUpdate(updateRoleDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 获取服务器运行信息
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public sysServeControllerStat(options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .sysServeControllerStat(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 添加任务
   * @param {CreateTaskDto} createTaskDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public sysTaskControllerAdd(createTaskDto: CreateTaskDto, options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .sysTaskControllerAdd(createTaskDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 删除任务
   * @param {CheckIdTaskDto} checkIdTaskDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public sysTaskControllerDelete(checkIdTaskDto: CheckIdTaskDto, options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .sysTaskControllerDelete(checkIdTaskDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查询任务详细信息
   * @param {number} id 任务ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public sysTaskControllerInfo(id: number, options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .sysTaskControllerInfo(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 手动执行一次任务
   * @param {CheckIdTaskDto} checkIdTaskDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public sysTaskControllerOnce(checkIdTaskDto: CheckIdTaskDto, options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .sysTaskControllerOnce(checkIdTaskDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 获取任务列表
   * @param {number} [limit] 当前页包含数量
   * @param {number} [page] 当前页包含数量
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public sysTaskControllerPage(limit?: number, page?: number, options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .sysTaskControllerPage(limit, page, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 启动任务
   * @param {CheckIdTaskDto} checkIdTaskDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public sysTaskControllerStart(checkIdTaskDto: CheckIdTaskDto, options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .sysTaskControllerStart(checkIdTaskDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 停止任务
   * @param {CheckIdTaskDto} checkIdTaskDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public sysTaskControllerStop(checkIdTaskDto: CheckIdTaskDto, options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .sysTaskControllerStop(checkIdTaskDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 更新任务
   * @param {UpdateTaskDto} updateTaskDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public sysTaskControllerUpdate(updateTaskDto: UpdateTaskDto, options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .sysTaskControllerUpdate(updateTaskDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 新增管理员
   * @param {CreateUserDto} createUserDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public sysUserControllerAdd(createUserDto: CreateUserDto, options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .sysUserControllerAdd(createUserDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 根据ID列表删除管理员
   * @param {DeleteUserDto} deleteUserDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public sysUserControllerDelete(deleteUserDto: DeleteUserDto, options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .sysUserControllerDelete(deleteUserDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查询管理员信息
   * @param {number} userId 用户ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public sysUserControllerInfo(userId: number, options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .sysUserControllerInfo(userId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 分页获取管理员列表
   * @param {PageSearchUserDto} pageSearchUserDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public sysUserControllerPage(
    pageSearchUserDto: PageSearchUserDto,
    options?: RawAxiosRequestConfig,
  ) {
    return DefaultApiFp(this.configuration)
      .sysUserControllerPage(pageSearchUserDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 更改指定管理员密码
   * @param {PasswordUserDto} passwordUserDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public sysUserControllerPassword(
    passwordUserDto: PasswordUserDto,
    options?: RawAxiosRequestConfig,
  ) {
    return DefaultApiFp(this.configuration)
      .sysUserControllerPassword(passwordUserDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 更新管理员信息
   * @param {UpdateUserDto} updateUserDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public sysUserControllerUpdate(updateUserDto: UpdateUserDto, options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .sysUserControllerUpdate(updateUserDto, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
